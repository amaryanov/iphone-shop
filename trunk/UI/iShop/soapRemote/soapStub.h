/* soapStub.h
   Generated by gSOAP 2.7.11 from MobileService.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_ns2__MItem
#define SOAP_TYPE_ns2__MItem (8)
/* ns2:MItem */
class SOAP_CMAC ns2__MItem
{
public:
	std::string *highlight1;	/* optional element of type xsd:string */
	std::string *highlight2;	/* optional element of type xsd:string */
	int *id;	/* optional element of type xsd:int */
	std::string *imageURL;	/* optional element of type xsd:string */
	std::string *name;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ns2__MItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__MItem() : highlight1(NULL), highlight2(NULL), id(NULL), imageURL(NULL), name(NULL), soap(NULL) { }
	virtual ~ns2__MItem() { }
};
#endif

#ifndef SOAP_TYPE_ns2__MCategory
#define SOAP_TYPE_ns2__MCategory (10)
/* ns2:MCategory */
class SOAP_CMAC ns2__MCategory
{
public:
	std::vector<ns2__MCategory * >childCategories;	/* optional element of type ns2:MCategory */
	int *id;	/* optional element of type xsd:int */
	std::string *imageURL;	/* optional element of type xsd:string */
	std::string *name;	/* optional element of type xsd:string */
	int *orderId;	/* optional element of type xsd:int */
	int *totalItems;	/* optional element of type xsd:int */
	int *type;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns2__MCategory */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__MCategory() : id(NULL), imageURL(NULL), name(NULL), orderId(NULL), totalItems(NULL), type(NULL), soap(NULL) { }
	virtual ~ns2__MCategory() { }
};
#endif

#ifndef SOAP_TYPE_ns2__MAddress
#define SOAP_TYPE_ns2__MAddress (13)
/* ns2:MAddress */
class SOAP_CMAC ns2__MAddress
{
public:
	std::string *area;	/* optional element of type xsd:string */
	std::string *city;	/* optional element of type xsd:string */
	std::string *street;	/* optional element of type xsd:string */
	std::string *zipCode;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns2__MAddress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__MAddress() : area(NULL), city(NULL), street(NULL), zipCode(NULL), soap(NULL) { }
	virtual ~ns2__MAddress() { }
};
#endif

#ifndef SOAP_TYPE_ns2__MContactInfo
#define SOAP_TYPE_ns2__MContactInfo (14)
/* ns2:MContactInfo */
class SOAP_CMAC ns2__MContactInfo
{
public:
	std::string *contactPerson;	/* optional element of type xsd:string */
	std::string *email;	/* optional element of type xsd:string */
	std::string *fax;	/* optional element of type xsd:string */
	std::string *mobile;	/* optional element of type xsd:string */
	std::string *phone;	/* optional element of type xsd:string */
	std::string *website;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns2__MContactInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__MContactInfo() : contactPerson(NULL), email(NULL), fax(NULL), mobile(NULL), phone(NULL), website(NULL), soap(NULL) { }
	virtual ~ns2__MContactInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns2__MProductOffer
#define SOAP_TYPE_ns2__MProductOffer (16)
/* ns2:MProductOffer */
class SOAP_CMAC ns2__MProductOffer
{
public:
	int *businessCreditPoints;	/* optional element of type xsd:int */
	std::string *businessLogo;	/* optional element of type xsd:string */
	float *businessRating;	/* optional element of type xsd:float */
	std::string *details;	/* optional element of type xsd:string */
	int *id;	/* optional element of type xsd:int */
	bool *inStock;	/* optional element of type xsd:boolean */
	float *price;	/* optional element of type xsd:float */
	std::string *productURL;	/* optional element of type xsd:string */
	float *shipmentCost;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns2__MProductOffer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__MProductOffer() : businessCreditPoints(NULL), businessLogo(NULL), businessRating(NULL), details(NULL), id(NULL), inStock(NULL), price(NULL), productURL(NULL), shipmentCost(NULL), soap(NULL) { }
	virtual ~ns2__MProductOffer() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getBusinessList
#define SOAP_TYPE__ns2__getBusinessList (18)
/* ns2:getBusinessList */
class SOAP_CMAC _ns2__getBusinessList
{
public:
	int *categoryId;	/* optional element of type xsd:int */
	int *startItemId;	/* optional element of type xsd:int */
	int *batchSize;	/* optional element of type xsd:int */
	int *languageId;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE__ns2__getBusinessList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getBusinessList() : categoryId(NULL), startItemId(NULL), batchSize(NULL), languageId(NULL), soap(NULL) { }
	virtual ~_ns2__getBusinessList() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getBusinessListResponse
#define SOAP_TYPE__ns2__getBusinessListResponse (19)
/* ns2:getBusinessListResponse */
class SOAP_CMAC _ns2__getBusinessListResponse
{
public:
	std::vector<class ns2__MBusinessCard * >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:MBusinessCard */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE__ns2__getBusinessListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getBusinessListResponse() : soap(NULL) { }
	virtual ~_ns2__getBusinessListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getCategory
#define SOAP_TYPE__ns2__getCategory (20)
/* ns2:getCategory */
class SOAP_CMAC _ns2__getCategory
{
public:
	int *categoryId;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE__ns2__getCategory */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getCategory() : categoryId(NULL), soap(NULL) { }
	virtual ~_ns2__getCategory() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getCategoryResponse
#define SOAP_TYPE__ns2__getCategoryResponse (21)
/* ns2:getCategoryResponse */
class SOAP_CMAC _ns2__getCategoryResponse
{
public:
	ns2__MCategory *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:MCategory */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE__ns2__getCategoryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getCategoryResponse() : return_(NULL), soap(NULL) { }
	virtual ~_ns2__getCategoryResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getCategoryList
#define SOAP_TYPE__ns2__getCategoryList (22)
/* ns2:getCategoryList */
class SOAP_CMAC _ns2__getCategoryList
{
public:
	int *categoryType;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE__ns2__getCategoryList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getCategoryList() : categoryType(NULL), soap(NULL) { }
	virtual ~_ns2__getCategoryList() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getCategoryListResponse
#define SOAP_TYPE__ns2__getCategoryListResponse (23)
/* ns2:getCategoryListResponse */
class SOAP_CMAC _ns2__getCategoryListResponse
{
public:
	std::vector<ns2__MCategory * >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:MCategory */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE__ns2__getCategoryListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getCategoryListResponse() : soap(NULL) { }
	virtual ~_ns2__getCategoryListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getBusinessDetails
#define SOAP_TYPE__ns2__getBusinessDetails (24)
/* ns2:getBusinessDetails */
class SOAP_CMAC _ns2__getBusinessDetails
{
public:
	int *businessId;	/* optional element of type xsd:int */
	int *languageId;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE__ns2__getBusinessDetails */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getBusinessDetails() : businessId(NULL), languageId(NULL), soap(NULL) { }
	virtual ~_ns2__getBusinessDetails() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getBusinessDetailsResponse
#define SOAP_TYPE__ns2__getBusinessDetailsResponse (25)
/* ns2:getBusinessDetailsResponse */
class SOAP_CMAC _ns2__getBusinessDetailsResponse
{
public:
	class ns2__MDetailedBusinessCard *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:MDetailedBusinessCard */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE__ns2__getBusinessDetailsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getBusinessDetailsResponse() : return_(NULL), soap(NULL) { }
	virtual ~_ns2__getBusinessDetailsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getProductDetails
#define SOAP_TYPE__ns2__getProductDetails (26)
/* ns2:getProductDetails */
class SOAP_CMAC _ns2__getProductDetails
{
public:
	int *productId;	/* optional element of type xsd:int */
	int *languageId;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE__ns2__getProductDetails */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getProductDetails() : productId(NULL), languageId(NULL), soap(NULL) { }
	virtual ~_ns2__getProductDetails() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getProductDetailsResponse
#define SOAP_TYPE__ns2__getProductDetailsResponse (27)
/* ns2:getProductDetailsResponse */
class SOAP_CMAC _ns2__getProductDetailsResponse
{
public:
	class ns2__MDetailedProduct *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:MDetailedProduct */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE__ns2__getProductDetailsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getProductDetailsResponse() : return_(NULL), soap(NULL) { }
	virtual ~_ns2__getProductDetailsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getPopularItems
#define SOAP_TYPE__ns2__getPopularItems (28)
/* ns2:getPopularItems */
class SOAP_CMAC _ns2__getPopularItems
{
public:
	int *categoryType;	/* optional element of type xsd:int */
	int *languageId;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE__ns2__getPopularItems */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getPopularItems() : categoryType(NULL), languageId(NULL), soap(NULL) { }
	virtual ~_ns2__getPopularItems() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getPopularItemsResponse
#define SOAP_TYPE__ns2__getPopularItemsResponse (29)
/* ns2:getPopularItemsResponse */
class SOAP_CMAC _ns2__getPopularItemsResponse
{
public:
	std::vector<ns2__MItem * >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:MItem */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE__ns2__getPopularItemsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getPopularItemsResponse() : soap(NULL) { }
	virtual ~_ns2__getPopularItemsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getProductList
#define SOAP_TYPE__ns2__getProductList (30)
/* ns2:getProductList */
class SOAP_CMAC _ns2__getProductList
{
public:
	int *categoryId;	/* optional element of type xsd:int */
	int *startItemId;	/* optional element of type xsd:int */
	int *batchSize;	/* optional element of type xsd:int */
	int *languageId;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE__ns2__getProductList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getProductList() : categoryId(NULL), startItemId(NULL), batchSize(NULL), languageId(NULL), soap(NULL) { }
	virtual ~_ns2__getProductList() { }
};
#endif

#ifndef SOAP_TYPE__ns2__getProductListResponse
#define SOAP_TYPE__ns2__getProductListResponse (31)
/* ns2:getProductListResponse */
class SOAP_CMAC _ns2__getProductListResponse
{
public:
	std::vector<class ns2__MProduct * >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:MProduct */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE__ns2__getProductListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__getProductListResponse() : soap(NULL) { }
	virtual ~_ns2__getProductListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__MBusinessCard
#define SOAP_TYPE_ns2__MBusinessCard (9)
/* ns2:MBusinessCard */
class SOAP_CMAC ns2__MBusinessCard : public ns2__MItem
{
public:
	int *vipLevel;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_ns2__MBusinessCard */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__MBusinessCard() : vipLevel(NULL) { }
	virtual ~ns2__MBusinessCard() { }
};
#endif

#ifndef SOAP_TYPE_ns2__MDetailedItem
#define SOAP_TYPE_ns2__MDetailedItem (11)
/* ns2:MDetailedItem */
class SOAP_CMAC ns2__MDetailedItem : public ns2__MItem
{
public:
	std::string *details;	/* optional element of type xsd:string */
	std::vector<std::string >features;	/* optional element of type xsd:string */
	std::vector<std::string >galleryImageUrls;	/* optional element of type xsd:string */
	float *rating;	/* optional element of type xsd:float */
	std::string *videoURL;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns2__MDetailedItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__MDetailedItem() : details(NULL), rating(NULL), videoURL(NULL) { }
	virtual ~ns2__MDetailedItem() { }
};
#endif

#ifndef SOAP_TYPE_ns2__MProduct
#define SOAP_TYPE_ns2__MProduct (17)
/* ns2:MProduct */
class SOAP_CMAC ns2__MProduct : public ns2__MItem
{
public:
	float *price;	/* optional element of type xsd:float */
	int *stores;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns2__MProduct */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__MProduct() : price(NULL), stores(NULL) { }
	virtual ~ns2__MProduct() { }
};
#endif

#ifndef SOAP_TYPE_ns2__MDetailedBusinessCard
#define SOAP_TYPE_ns2__MDetailedBusinessCard (12)
/* ns2:MDetailedBusinessCard */
class SOAP_CMAC ns2__MDetailedBusinessCard : public ns2__MDetailedItem
{
public:
	ns2__MAddress *address;	/* optional element of type ns2:MAddress */
	ns2__MContactInfo *contact;	/* optional element of type ns2:MContactInfo */
	int *vipLevel;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns2__MDetailedBusinessCard */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__MDetailedBusinessCard() : address(NULL), contact(NULL), vipLevel(NULL) { }
	virtual ~ns2__MDetailedBusinessCard() { }
};
#endif

#ifndef SOAP_TYPE_ns2__MDetailedProduct
#define SOAP_TYPE_ns2__MDetailedProduct (15)
/* ns2:MDetailedProduct */
class SOAP_CMAC ns2__MDetailedProduct : public ns2__MDetailedItem
{
public:
	std::string *amazonURL;	/* optional element of type xsd:string */
	std::vector<ns2__MProductOffer * >offers;	/* optional element of type ns2:MProductOffer */
	float *price;	/* optional element of type xsd:float */
	std::string *reviewURL;	/* optional element of type xsd:string */
	int *stores;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns2__MDetailedProduct */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__MDetailedProduct() : amazonURL(NULL), price(NULL), reviewURL(NULL), stores(NULL) { }
	virtual ~ns2__MDetailedProduct() { }
};
#endif

#ifndef SOAP_TYPE___ns3__getCategory
#define SOAP_TYPE___ns3__getCategory (58)
/* Operation wrapper: */
struct __ns3__getCategory
{
public:
	_ns2__getCategory *ns2__getCategory;	/* optional element of type ns2:getCategory */
};
#endif

#ifndef SOAP_TYPE___ns3__getProductDetails
#define SOAP_TYPE___ns3__getProductDetails (62)
/* Operation wrapper: */
struct __ns3__getProductDetails
{
public:
	_ns2__getProductDetails *ns2__getProductDetails;	/* optional element of type ns2:getProductDetails */
};
#endif

#ifndef SOAP_TYPE___ns3__getPopularItems
#define SOAP_TYPE___ns3__getPopularItems (66)
/* Operation wrapper: */
struct __ns3__getPopularItems
{
public:
	_ns2__getPopularItems *ns2__getPopularItems;	/* optional element of type ns2:getPopularItems */
};
#endif

#ifndef SOAP_TYPE___ns3__getCategoryList
#define SOAP_TYPE___ns3__getCategoryList (70)
/* Operation wrapper: */
struct __ns3__getCategoryList
{
public:
	_ns2__getCategoryList *ns2__getCategoryList;	/* optional element of type ns2:getCategoryList */
};
#endif

#ifndef SOAP_TYPE___ns3__getBusinessList
#define SOAP_TYPE___ns3__getBusinessList (74)
/* Operation wrapper: */
struct __ns3__getBusinessList
{
public:
	_ns2__getBusinessList *ns2__getBusinessList;	/* optional element of type ns2:getBusinessList */
};
#endif

#ifndef SOAP_TYPE___ns3__getProductList
#define SOAP_TYPE___ns3__getProductList (78)
/* Operation wrapper: */
struct __ns3__getProductList
{
public:
	_ns2__getProductList *ns2__getProductList;	/* optional element of type ns2:getProductList */
};
#endif

#ifndef SOAP_TYPE___ns3__getBusinessDetails
#define SOAP_TYPE___ns3__getBusinessDetails (82)
/* Operation wrapper: */
struct __ns3__getBusinessDetails
{
public:
	_ns2__getBusinessDetails *ns2__getBusinessDetails;	/* optional element of type ns2:getBusinessDetails */
};
#endif

#ifndef SOAP_TYPE___ns4__getCategory
#define SOAP_TYPE___ns4__getCategory (84)
/* Operation wrapper: */
struct __ns4__getCategory
{
public:
	_ns2__getCategory *ns2__getCategory;	/* optional element of type ns2:getCategory */
};
#endif

#ifndef SOAP_TYPE___ns4__getProductDetails
#define SOAP_TYPE___ns4__getProductDetails (86)
/* Operation wrapper: */
struct __ns4__getProductDetails
{
public:
	_ns2__getProductDetails *ns2__getProductDetails;	/* optional element of type ns2:getProductDetails */
};
#endif

#ifndef SOAP_TYPE___ns4__getPopularItems
#define SOAP_TYPE___ns4__getPopularItems (88)
/* Operation wrapper: */
struct __ns4__getPopularItems
{
public:
	_ns2__getPopularItems *ns2__getPopularItems;	/* optional element of type ns2:getPopularItems */
};
#endif

#ifndef SOAP_TYPE___ns4__getCategoryList
#define SOAP_TYPE___ns4__getCategoryList (90)
/* Operation wrapper: */
struct __ns4__getCategoryList
{
public:
	_ns2__getCategoryList *ns2__getCategoryList;	/* optional element of type ns2:getCategoryList */
};
#endif

#ifndef SOAP_TYPE___ns4__getBusinessList
#define SOAP_TYPE___ns4__getBusinessList (92)
/* Operation wrapper: */
struct __ns4__getBusinessList
{
public:
	_ns2__getBusinessList *ns2__getBusinessList;	/* optional element of type ns2:getBusinessList */
};
#endif

#ifndef SOAP_TYPE___ns4__getProductList
#define SOAP_TYPE___ns4__getProductList (94)
/* Operation wrapper: */
struct __ns4__getProductList
{
public:
	_ns2__getProductList *ns2__getProductList;	/* optional element of type ns2:getProductList */
};
#endif

#ifndef SOAP_TYPE___ns4__getBusinessDetails
#define SOAP_TYPE___ns4__getBusinessDetails (96)
/* Operation wrapper: */
struct __ns4__getBusinessDetails
{
public:
	_ns2__getBusinessDetails *ns2__getBusinessDetails;	/* optional element of type ns2:getBusinessDetails */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (97)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (98)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (100)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (103)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (104)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__getCategory(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__getCategory *ns2__getCategory, _ns2__getCategoryResponse *ns2__getCategoryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__getProductDetails(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__getProductDetails *ns2__getProductDetails, _ns2__getProductDetailsResponse *ns2__getProductDetailsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__getPopularItems(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__getPopularItems *ns2__getPopularItems, _ns2__getPopularItemsResponse *ns2__getPopularItemsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__getCategoryList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__getCategoryList *ns2__getCategoryList, _ns2__getCategoryListResponse *ns2__getCategoryListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__getBusinessList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__getBusinessList *ns2__getBusinessList, _ns2__getBusinessListResponse *ns2__getBusinessListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__getProductList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__getProductList *ns2__getProductList, _ns2__getProductListResponse *ns2__getProductListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__getBusinessDetails(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__getBusinessDetails *ns2__getBusinessDetails, _ns2__getBusinessDetailsResponse *ns2__getBusinessDetailsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__getCategory(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__getCategory *ns2__getCategory, _ns2__getCategoryResponse *ns2__getCategoryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__getProductDetails(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__getProductDetails *ns2__getProductDetails, _ns2__getProductDetailsResponse *ns2__getProductDetailsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__getPopularItems(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__getPopularItems *ns2__getPopularItems, _ns2__getPopularItemsResponse *ns2__getPopularItemsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__getCategoryList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__getCategoryList *ns2__getCategoryList, _ns2__getCategoryListResponse *ns2__getCategoryListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__getBusinessList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__getBusinessList *ns2__getBusinessList, _ns2__getBusinessListResponse *ns2__getBusinessListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__getProductList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__getProductList *ns2__getProductList, _ns2__getProductListResponse *ns2__getProductListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__getBusinessDetails(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__getBusinessDetails *ns2__getBusinessDetails, _ns2__getBusinessDetailsResponse *ns2__getBusinessDetailsResponse);

#endif

/* End of soapStub.h */
