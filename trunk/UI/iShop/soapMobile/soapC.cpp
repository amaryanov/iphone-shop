/* soapC.cpp
   Generated by gSOAP 2.7.11 from ../../IMobile.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.11 2008-08-15 10:30:17 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns2__MProductOffer:
		return soap_in_ns2__MProductOffer(soap, NULL, NULL, "ns2:MProductOffer");
	case SOAP_TYPE_ns2__MDetailedProduct:
		return soap_in_ns2__MDetailedProduct(soap, NULL, NULL, "ns2:MDetailedProduct");
	case SOAP_TYPE_ns2__MProduct:
		return soap_in_ns2__MProduct(soap, NULL, NULL, "ns2:MProduct");
	case SOAP_TYPE_ns2__MContactInfo:
		return soap_in_ns2__MContactInfo(soap, NULL, NULL, "ns2:MContactInfo");
	case SOAP_TYPE_ns2__MAddress:
		return soap_in_ns2__MAddress(soap, NULL, NULL, "ns2:MAddress");
	case SOAP_TYPE_ns2__MDetailedBusinessCard:
		return soap_in_ns2__MDetailedBusinessCard(soap, NULL, NULL, "ns2:MDetailedBusinessCard");
	case SOAP_TYPE_ns2__MCategory:
		return soap_in_ns2__MCategory(soap, NULL, NULL, "ns2:MCategory");
	case SOAP_TYPE_ns2__MBusinessCard:
		return soap_in_ns2__MBusinessCard(soap, NULL, NULL, "ns2:MBusinessCard");
	case SOAP_TYPE_ns2__MItem:
		return soap_in_ns2__MItem(soap, NULL, NULL, "ns2:MItem");
	case SOAP_TYPE_PointerTo_ns1__getBusinessDetailsResponse:
		return soap_in_PointerTo_ns1__getBusinessDetailsResponse(soap, NULL, NULL, "ns1:getBusinessDetailsResponse");
	case SOAP_TYPE_PointerTo_ns1__getBusinessDetails:
		return soap_in_PointerTo_ns1__getBusinessDetails(soap, NULL, NULL, "ns1:getBusinessDetails");
	case SOAP_TYPE_PointerTo_ns1__getProductListResponse:
		return soap_in_PointerTo_ns1__getProductListResponse(soap, NULL, NULL, "ns1:getProductListResponse");
	case SOAP_TYPE_PointerTo_ns1__getProductList:
		return soap_in_PointerTo_ns1__getProductList(soap, NULL, NULL, "ns1:getProductList");
	case SOAP_TYPE_PointerTo_ns1__getBusinessListResponse:
		return soap_in_PointerTo_ns1__getBusinessListResponse(soap, NULL, NULL, "ns1:getBusinessListResponse");
	case SOAP_TYPE_PointerTo_ns1__getBusinessList:
		return soap_in_PointerTo_ns1__getBusinessList(soap, NULL, NULL, "ns1:getBusinessList");
	case SOAP_TYPE_PointerTo_ns1__getCategoryListResponse:
		return soap_in_PointerTo_ns1__getCategoryListResponse(soap, NULL, NULL, "ns1:getCategoryListResponse");
	case SOAP_TYPE_PointerTo_ns1__getCategoryList:
		return soap_in_PointerTo_ns1__getCategoryList(soap, NULL, NULL, "ns1:getCategoryList");
	case SOAP_TYPE_PointerTo_ns1__getProductDetailsResponse:
		return soap_in_PointerTo_ns1__getProductDetailsResponse(soap, NULL, NULL, "ns1:getProductDetailsResponse");
	case SOAP_TYPE_PointerTo_ns1__getProductDetails:
		return soap_in_PointerTo_ns1__getProductDetails(soap, NULL, NULL, "ns1:getProductDetails");
	case SOAP_TYPE_PointerTons2__MProductOffer:
		return soap_in_PointerTons2__MProductOffer(soap, NULL, NULL, "ns2:MProductOffer");
	case SOAP_TYPE_PointerTons2__MContactInfo:
		return soap_in_PointerTons2__MContactInfo(soap, NULL, NULL, "ns2:MContactInfo");
	case SOAP_TYPE_PointerTons2__MAddress:
		return soap_in_PointerTons2__MAddress(soap, NULL, NULL, "ns2:MAddress");
	case SOAP_TYPE_PointerTons2__MProduct:
		return soap_in_PointerTons2__MProduct(soap, NULL, NULL, "ns2:MProduct");
	case SOAP_TYPE_PointerTons2__MDetailedProduct:
		return soap_in_PointerTons2__MDetailedProduct(soap, NULL, NULL, "ns2:MDetailedProduct");
	case SOAP_TYPE_PointerTons2__MDetailedBusinessCard:
		return soap_in_PointerTons2__MDetailedBusinessCard(soap, NULL, NULL, "ns2:MDetailedBusinessCard");
	case SOAP_TYPE_PointerTons2__MBusinessCard:
		return soap_in_PointerTons2__MBusinessCard(soap, NULL, NULL, "ns2:MBusinessCard");
	case SOAP_TYPE_PointerTofloat:
		return soap_in_PointerTofloat(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_PointerTons2__MCategory:
		return soap_in_PointerTons2__MCategory(soap, NULL, NULL, "ns2:MCategory");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:MProductOffer"))
		{	*type = SOAP_TYPE_ns2__MProductOffer;
			return soap_in_ns2__MProductOffer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:MDetailedProduct"))
		{	*type = SOAP_TYPE_ns2__MDetailedProduct;
			return soap_in_ns2__MDetailedProduct(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:MProduct"))
		{	*type = SOAP_TYPE_ns2__MProduct;
			return soap_in_ns2__MProduct(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:MContactInfo"))
		{	*type = SOAP_TYPE_ns2__MContactInfo;
			return soap_in_ns2__MContactInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:MAddress"))
		{	*type = SOAP_TYPE_ns2__MAddress;
			return soap_in_ns2__MAddress(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:MDetailedBusinessCard"))
		{	*type = SOAP_TYPE_ns2__MDetailedBusinessCard;
			return soap_in_ns2__MDetailedBusinessCard(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:MCategory"))
		{	*type = SOAP_TYPE_ns2__MCategory;
			return soap_in_ns2__MCategory(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:MBusinessCard"))
		{	*type = SOAP_TYPE_ns2__MBusinessCard;
			return soap_in_ns2__MBusinessCard(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:MItem"))
		{	*type = SOAP_TYPE_ns2__MItem;
			return soap_in_ns2__MItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:getProductListResponse"))
		{	*type = SOAP_TYPE__ns1__getProductListResponse;
			return soap_in__ns1__getProductListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getProductList"))
		{	*type = SOAP_TYPE__ns1__getProductList;
			return soap_in__ns1__getProductList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getProductDetailsResponse"))
		{	*type = SOAP_TYPE__ns1__getProductDetailsResponse;
			return soap_in__ns1__getProductDetailsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getProductDetails"))
		{	*type = SOAP_TYPE__ns1__getProductDetails;
			return soap_in__ns1__getProductDetails(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getBusinessDetailsResponse"))
		{	*type = SOAP_TYPE__ns1__getBusinessDetailsResponse;
			return soap_in__ns1__getBusinessDetailsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getBusinessDetails"))
		{	*type = SOAP_TYPE__ns1__getBusinessDetails;
			return soap_in__ns1__getBusinessDetails(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getCategoryListResponse"))
		{	*type = SOAP_TYPE__ns1__getCategoryListResponse;
			return soap_in__ns1__getCategoryListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getCategoryList"))
		{	*type = SOAP_TYPE__ns1__getCategoryList;
			return soap_in__ns1__getCategoryList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getBusinessListResponse"))
		{	*type = SOAP_TYPE__ns1__getBusinessListResponse;
			return soap_in__ns1__getBusinessListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getBusinessList"))
		{	*type = SOAP_TYPE__ns1__getBusinessList;
			return soap_in__ns1__getBusinessList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__getProductListResponse:
		return ((_ns1__getProductListResponse *)ptr)->soap_out(soap, "ns1:getProductListResponse", id, NULL);
	case SOAP_TYPE__ns1__getProductList:
		return ((_ns1__getProductList *)ptr)->soap_out(soap, "ns1:getProductList", id, NULL);
	case SOAP_TYPE__ns1__getProductDetailsResponse:
		return ((_ns1__getProductDetailsResponse *)ptr)->soap_out(soap, "ns1:getProductDetailsResponse", id, NULL);
	case SOAP_TYPE__ns1__getProductDetails:
		return ((_ns1__getProductDetails *)ptr)->soap_out(soap, "ns1:getProductDetails", id, NULL);
	case SOAP_TYPE__ns1__getBusinessDetailsResponse:
		return ((_ns1__getBusinessDetailsResponse *)ptr)->soap_out(soap, "ns1:getBusinessDetailsResponse", id, NULL);
	case SOAP_TYPE__ns1__getBusinessDetails:
		return ((_ns1__getBusinessDetails *)ptr)->soap_out(soap, "ns1:getBusinessDetails", id, NULL);
	case SOAP_TYPE__ns1__getCategoryListResponse:
		return ((_ns1__getCategoryListResponse *)ptr)->soap_out(soap, "ns1:getCategoryListResponse", id, NULL);
	case SOAP_TYPE__ns1__getCategoryList:
		return ((_ns1__getCategoryList *)ptr)->soap_out(soap, "ns1:getCategoryList", id, NULL);
	case SOAP_TYPE__ns1__getBusinessListResponse:
		return ((_ns1__getBusinessListResponse *)ptr)->soap_out(soap, "ns1:getBusinessListResponse", id, NULL);
	case SOAP_TYPE__ns1__getBusinessList:
		return ((_ns1__getBusinessList *)ptr)->soap_out(soap, "ns1:getBusinessList", id, NULL);
	case SOAP_TYPE_ns2__MProductOffer:
		return ((ns2__MProductOffer *)ptr)->soap_out(soap, tag, id, "ns2:MProductOffer");
	case SOAP_TYPE_ns2__MDetailedProduct:
		return ((ns2__MDetailedProduct *)ptr)->soap_out(soap, tag, id, "ns2:MDetailedProduct");
	case SOAP_TYPE_ns2__MProduct:
		return ((ns2__MProduct *)ptr)->soap_out(soap, tag, id, "ns2:MProduct");
	case SOAP_TYPE_ns2__MContactInfo:
		return ((ns2__MContactInfo *)ptr)->soap_out(soap, tag, id, "ns2:MContactInfo");
	case SOAP_TYPE_ns2__MAddress:
		return ((ns2__MAddress *)ptr)->soap_out(soap, tag, id, "ns2:MAddress");
	case SOAP_TYPE_ns2__MDetailedBusinessCard:
		return ((ns2__MDetailedBusinessCard *)ptr)->soap_out(soap, tag, id, "ns2:MDetailedBusinessCard");
	case SOAP_TYPE_ns2__MCategory:
		return ((ns2__MCategory *)ptr)->soap_out(soap, tag, id, "ns2:MCategory");
	case SOAP_TYPE_ns2__MBusinessCard:
		return ((ns2__MBusinessCard *)ptr)->soap_out(soap, tag, id, "ns2:MBusinessCard");
	case SOAP_TYPE_ns2__MItem:
		return ((ns2__MItem *)ptr)->soap_out(soap, tag, id, "ns2:MItem");
	case SOAP_TYPE_PointerTo_ns1__getBusinessDetailsResponse:
		return soap_out_PointerTo_ns1__getBusinessDetailsResponse(soap, tag, id, (_ns1__getBusinessDetailsResponse *const*)ptr, "ns1:getBusinessDetailsResponse");
	case SOAP_TYPE_PointerTo_ns1__getBusinessDetails:
		return soap_out_PointerTo_ns1__getBusinessDetails(soap, tag, id, (_ns1__getBusinessDetails *const*)ptr, "ns1:getBusinessDetails");
	case SOAP_TYPE_PointerTo_ns1__getProductListResponse:
		return soap_out_PointerTo_ns1__getProductListResponse(soap, tag, id, (_ns1__getProductListResponse *const*)ptr, "ns1:getProductListResponse");
	case SOAP_TYPE_PointerTo_ns1__getProductList:
		return soap_out_PointerTo_ns1__getProductList(soap, tag, id, (_ns1__getProductList *const*)ptr, "ns1:getProductList");
	case SOAP_TYPE_PointerTo_ns1__getBusinessListResponse:
		return soap_out_PointerTo_ns1__getBusinessListResponse(soap, tag, id, (_ns1__getBusinessListResponse *const*)ptr, "ns1:getBusinessListResponse");
	case SOAP_TYPE_PointerTo_ns1__getBusinessList:
		return soap_out_PointerTo_ns1__getBusinessList(soap, tag, id, (_ns1__getBusinessList *const*)ptr, "ns1:getBusinessList");
	case SOAP_TYPE_PointerTo_ns1__getCategoryListResponse:
		return soap_out_PointerTo_ns1__getCategoryListResponse(soap, tag, id, (_ns1__getCategoryListResponse *const*)ptr, "ns1:getCategoryListResponse");
	case SOAP_TYPE_PointerTo_ns1__getCategoryList:
		return soap_out_PointerTo_ns1__getCategoryList(soap, tag, id, (_ns1__getCategoryList *const*)ptr, "ns1:getCategoryList");
	case SOAP_TYPE_PointerTo_ns1__getProductDetailsResponse:
		return soap_out_PointerTo_ns1__getProductDetailsResponse(soap, tag, id, (_ns1__getProductDetailsResponse *const*)ptr, "ns1:getProductDetailsResponse");
	case SOAP_TYPE_PointerTo_ns1__getProductDetails:
		return soap_out_PointerTo_ns1__getProductDetails(soap, tag, id, (_ns1__getProductDetails *const*)ptr, "ns1:getProductDetails");
	case SOAP_TYPE_PointerTons2__MProductOffer:
		return soap_out_PointerTons2__MProductOffer(soap, tag, id, (ns2__MProductOffer *const*)ptr, "ns2:MProductOffer");
	case SOAP_TYPE_PointerTons2__MContactInfo:
		return soap_out_PointerTons2__MContactInfo(soap, tag, id, (ns2__MContactInfo *const*)ptr, "ns2:MContactInfo");
	case SOAP_TYPE_PointerTons2__MAddress:
		return soap_out_PointerTons2__MAddress(soap, tag, id, (ns2__MAddress *const*)ptr, "ns2:MAddress");
	case SOAP_TYPE_PointerTons2__MProduct:
		return soap_out_PointerTons2__MProduct(soap, tag, id, (ns2__MProduct *const*)ptr, "ns2:MProduct");
	case SOAP_TYPE_PointerTons2__MDetailedProduct:
		return soap_out_PointerTons2__MDetailedProduct(soap, tag, id, (ns2__MDetailedProduct *const*)ptr, "ns2:MDetailedProduct");
	case SOAP_TYPE_PointerTons2__MDetailedBusinessCard:
		return soap_out_PointerTons2__MDetailedBusinessCard(soap, tag, id, (ns2__MDetailedBusinessCard *const*)ptr, "ns2:MDetailedBusinessCard");
	case SOAP_TYPE_PointerTons2__MBusinessCard:
		return soap_out_PointerTons2__MBusinessCard(soap, tag, id, (ns2__MBusinessCard *const*)ptr, "ns2:MBusinessCard");
	case SOAP_TYPE_PointerTofloat:
		return soap_out_PointerTofloat(soap, tag, id, (float *const*)ptr, "xsd:float");
	case SOAP_TYPE_PointerTons2__MCategory:
		return soap_out_PointerTons2__MCategory(soap, tag, id, (ns2__MCategory *const*)ptr, "ns2:MCategory");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__getProductListResponse:
		((_ns1__getProductListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getProductList:
		((_ns1__getProductList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getProductDetailsResponse:
		((_ns1__getProductDetailsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getProductDetails:
		((_ns1__getProductDetails *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getBusinessDetailsResponse:
		((_ns1__getBusinessDetailsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getBusinessDetails:
		((_ns1__getBusinessDetails *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getCategoryListResponse:
		((_ns1__getCategoryListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getCategoryList:
		((_ns1__getCategoryList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getBusinessListResponse:
		((_ns1__getBusinessListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getBusinessList:
		((_ns1__getBusinessList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__MProductOffer:
		((ns2__MProductOffer *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__MDetailedProduct:
		((ns2__MDetailedProduct *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__MProduct:
		((ns2__MProduct *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__MContactInfo:
		((ns2__MContactInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__MAddress:
		((ns2__MAddress *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__MDetailedBusinessCard:
		((ns2__MDetailedBusinessCard *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__MCategory:
		((ns2__MCategory *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__MBusinessCard:
		((ns2__MBusinessCard *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__MItem:
		((ns2__MItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns4__getBusinessDetails:
		soap_serialize___ns4__getBusinessDetails(soap, (const struct __ns4__getBusinessDetails *)ptr);
		break;
	case SOAP_TYPE___ns4__getProductList:
		soap_serialize___ns4__getProductList(soap, (const struct __ns4__getProductList *)ptr);
		break;
	case SOAP_TYPE___ns4__getBusinessList:
		soap_serialize___ns4__getBusinessList(soap, (const struct __ns4__getBusinessList *)ptr);
		break;
	case SOAP_TYPE___ns4__getCategoryList:
		soap_serialize___ns4__getCategoryList(soap, (const struct __ns4__getCategoryList *)ptr);
		break;
	case SOAP_TYPE___ns4__getProductDetails:
		soap_serialize___ns4__getProductDetails(soap, (const struct __ns4__getProductDetails *)ptr);
		break;
	case SOAP_TYPE___ns3__getBusinessDetails:
		soap_serialize___ns3__getBusinessDetails(soap, (const struct __ns3__getBusinessDetails *)ptr);
		break;
	case SOAP_TYPE___ns3__getProductList:
		soap_serialize___ns3__getProductList(soap, (const struct __ns3__getProductList *)ptr);
		break;
	case SOAP_TYPE___ns3__getBusinessList:
		soap_serialize___ns3__getBusinessList(soap, (const struct __ns3__getBusinessList *)ptr);
		break;
	case SOAP_TYPE___ns3__getCategoryList:
		soap_serialize___ns3__getCategoryList(soap, (const struct __ns3__getCategoryList *)ptr);
		break;
	case SOAP_TYPE___ns3__getProductDetails:
		soap_serialize___ns3__getProductDetails(soap, (const struct __ns3__getProductDetails *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getBusinessDetailsResponse:
		soap_serialize_PointerTo_ns1__getBusinessDetailsResponse(soap, (_ns1__getBusinessDetailsResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getBusinessDetails:
		soap_serialize_PointerTo_ns1__getBusinessDetails(soap, (_ns1__getBusinessDetails *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getProductListResponse:
		soap_serialize_PointerTo_ns1__getProductListResponse(soap, (_ns1__getProductListResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getProductList:
		soap_serialize_PointerTo_ns1__getProductList(soap, (_ns1__getProductList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getBusinessListResponse:
		soap_serialize_PointerTo_ns1__getBusinessListResponse(soap, (_ns1__getBusinessListResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getBusinessList:
		soap_serialize_PointerTo_ns1__getBusinessList(soap, (_ns1__getBusinessList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getCategoryListResponse:
		soap_serialize_PointerTo_ns1__getCategoryListResponse(soap, (_ns1__getCategoryListResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getCategoryList:
		soap_serialize_PointerTo_ns1__getCategoryList(soap, (_ns1__getCategoryList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getProductDetailsResponse:
		soap_serialize_PointerTo_ns1__getProductDetailsResponse(soap, (_ns1__getProductDetailsResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getProductDetails:
		soap_serialize_PointerTo_ns1__getProductDetails(soap, (_ns1__getProductDetails *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__MProductOffer:
		soap_serialize_PointerTons2__MProductOffer(soap, (ns2__MProductOffer *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__MContactInfo:
		soap_serialize_PointerTons2__MContactInfo(soap, (ns2__MContactInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__MAddress:
		soap_serialize_PointerTons2__MAddress(soap, (ns2__MAddress *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__MProduct:
		soap_serialize_PointerTons2__MProduct(soap, (ns2__MProduct *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__MDetailedProduct:
		soap_serialize_PointerTons2__MDetailedProduct(soap, (ns2__MDetailedProduct *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__MDetailedBusinessCard:
		soap_serialize_PointerTons2__MDetailedBusinessCard(soap, (ns2__MDetailedBusinessCard *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__MBusinessCard:
		soap_serialize_PointerTons2__MBusinessCard(soap, (ns2__MBusinessCard *const*)ptr);
		break;
	case SOAP_TYPE_PointerTofloat:
		soap_serialize_PointerTofloat(soap, (float *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__MCategory:
		soap_serialize_PointerTons2__MCategory(soap, (ns2__MCategory *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__MItem:
		return (void*)soap_instantiate_ns2__MItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__MCategory:
		return (void*)soap_instantiate_ns2__MCategory(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__MAddress:
		return (void*)soap_instantiate_ns2__MAddress(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__MContactInfo:
		return (void*)soap_instantiate_ns2__MContactInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__MProductOffer:
		return (void*)soap_instantiate_ns2__MProductOffer(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getBusinessList:
		return (void*)soap_instantiate__ns1__getBusinessList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getBusinessListResponse:
		return (void*)soap_instantiate__ns1__getBusinessListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getCategoryList:
		return (void*)soap_instantiate__ns1__getCategoryList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getCategoryListResponse:
		return (void*)soap_instantiate__ns1__getCategoryListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getBusinessDetails:
		return (void*)soap_instantiate__ns1__getBusinessDetails(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getBusinessDetailsResponse:
		return (void*)soap_instantiate__ns1__getBusinessDetailsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getProductDetails:
		return (void*)soap_instantiate__ns1__getProductDetails(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getProductDetailsResponse:
		return (void*)soap_instantiate__ns1__getProductDetailsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getProductList:
		return (void*)soap_instantiate__ns1__getProductList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getProductListResponse:
		return (void*)soap_instantiate__ns1__getProductListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__MBusinessCard:
		return (void*)soap_instantiate_ns2__MBusinessCard(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__MProduct:
		return (void*)soap_instantiate_ns2__MProduct(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__MDetailedBusinessCard:
		return (void*)soap_instantiate_ns2__MDetailedBusinessCard(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__MDetailedProduct:
		return (void*)soap_instantiate_ns2__MDetailedProduct(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__getProductDetails:
		return (void*)soap_instantiate___ns3__getProductDetails(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__getCategoryList:
		return (void*)soap_instantiate___ns3__getCategoryList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__getBusinessList:
		return (void*)soap_instantiate___ns3__getBusinessList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__getProductList:
		return (void*)soap_instantiate___ns3__getProductList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__getBusinessDetails:
		return (void*)soap_instantiate___ns3__getBusinessDetails(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__getProductDetails:
		return (void*)soap_instantiate___ns4__getProductDetails(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__getCategoryList:
		return (void*)soap_instantiate___ns4__getCategoryList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__getBusinessList:
		return (void*)soap_instantiate___ns4__getBusinessList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__getProductList:
		return (void*)soap_instantiate___ns4__getProductList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__getBusinessDetails:
		return (void*)soap_instantiate___ns4__getBusinessDetails(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__MProductOffer:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons2__MProductOffer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__MProduct:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons2__MProduct(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__MBusinessCard:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons2__MBusinessCard(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__MCategory:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons2__MCategory(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_ns2__MItem:
		if (p->size < 0)
			delete (ns2__MItem*)p->ptr;
		else
			delete[] (ns2__MItem*)p->ptr;
		break;
	case SOAP_TYPE_ns2__MCategory:
		if (p->size < 0)
			delete (ns2__MCategory*)p->ptr;
		else
			delete[] (ns2__MCategory*)p->ptr;
		break;
	case SOAP_TYPE_ns2__MAddress:
		if (p->size < 0)
			delete (ns2__MAddress*)p->ptr;
		else
			delete[] (ns2__MAddress*)p->ptr;
		break;
	case SOAP_TYPE_ns2__MContactInfo:
		if (p->size < 0)
			delete (ns2__MContactInfo*)p->ptr;
		else
			delete[] (ns2__MContactInfo*)p->ptr;
		break;
	case SOAP_TYPE_ns2__MProductOffer:
		if (p->size < 0)
			delete (ns2__MProductOffer*)p->ptr;
		else
			delete[] (ns2__MProductOffer*)p->ptr;
		break;
	case SOAP_TYPE__ns1__getBusinessList:
		if (p->size < 0)
			delete (_ns1__getBusinessList*)p->ptr;
		else
			delete[] (_ns1__getBusinessList*)p->ptr;
		break;
	case SOAP_TYPE__ns1__getBusinessListResponse:
		if (p->size < 0)
			delete (_ns1__getBusinessListResponse*)p->ptr;
		else
			delete[] (_ns1__getBusinessListResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__getCategoryList:
		if (p->size < 0)
			delete (_ns1__getCategoryList*)p->ptr;
		else
			delete[] (_ns1__getCategoryList*)p->ptr;
		break;
	case SOAP_TYPE__ns1__getCategoryListResponse:
		if (p->size < 0)
			delete (_ns1__getCategoryListResponse*)p->ptr;
		else
			delete[] (_ns1__getCategoryListResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__getBusinessDetails:
		if (p->size < 0)
			delete (_ns1__getBusinessDetails*)p->ptr;
		else
			delete[] (_ns1__getBusinessDetails*)p->ptr;
		break;
	case SOAP_TYPE__ns1__getBusinessDetailsResponse:
		if (p->size < 0)
			delete (_ns1__getBusinessDetailsResponse*)p->ptr;
		else
			delete[] (_ns1__getBusinessDetailsResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__getProductDetails:
		if (p->size < 0)
			delete (_ns1__getProductDetails*)p->ptr;
		else
			delete[] (_ns1__getProductDetails*)p->ptr;
		break;
	case SOAP_TYPE__ns1__getProductDetailsResponse:
		if (p->size < 0)
			delete (_ns1__getProductDetailsResponse*)p->ptr;
		else
			delete[] (_ns1__getProductDetailsResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__getProductList:
		if (p->size < 0)
			delete (_ns1__getProductList*)p->ptr;
		else
			delete[] (_ns1__getProductList*)p->ptr;
		break;
	case SOAP_TYPE__ns1__getProductListResponse:
		if (p->size < 0)
			delete (_ns1__getProductListResponse*)p->ptr;
		else
			delete[] (_ns1__getProductListResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__MBusinessCard:
		if (p->size < 0)
			delete (ns2__MBusinessCard*)p->ptr;
		else
			delete[] (ns2__MBusinessCard*)p->ptr;
		break;
	case SOAP_TYPE_ns2__MProduct:
		if (p->size < 0)
			delete (ns2__MProduct*)p->ptr;
		else
			delete[] (ns2__MProduct*)p->ptr;
		break;
	case SOAP_TYPE_ns2__MDetailedBusinessCard:
		if (p->size < 0)
			delete (ns2__MDetailedBusinessCard*)p->ptr;
		else
			delete[] (ns2__MDetailedBusinessCard*)p->ptr;
		break;
	case SOAP_TYPE_ns2__MDetailedProduct:
		if (p->size < 0)
			delete (ns2__MDetailedProduct*)p->ptr;
		else
			delete[] (ns2__MDetailedProduct*)p->ptr;
		break;
	case SOAP_TYPE___ns3__getProductDetails:
		if (p->size < 0)
			delete (struct __ns3__getProductDetails*)p->ptr;
		else
			delete[] (struct __ns3__getProductDetails*)p->ptr;
		break;
	case SOAP_TYPE___ns3__getCategoryList:
		if (p->size < 0)
			delete (struct __ns3__getCategoryList*)p->ptr;
		else
			delete[] (struct __ns3__getCategoryList*)p->ptr;
		break;
	case SOAP_TYPE___ns3__getBusinessList:
		if (p->size < 0)
			delete (struct __ns3__getBusinessList*)p->ptr;
		else
			delete[] (struct __ns3__getBusinessList*)p->ptr;
		break;
	case SOAP_TYPE___ns3__getProductList:
		if (p->size < 0)
			delete (struct __ns3__getProductList*)p->ptr;
		else
			delete[] (struct __ns3__getProductList*)p->ptr;
		break;
	case SOAP_TYPE___ns3__getBusinessDetails:
		if (p->size < 0)
			delete (struct __ns3__getBusinessDetails*)p->ptr;
		else
			delete[] (struct __ns3__getBusinessDetails*)p->ptr;
		break;
	case SOAP_TYPE___ns4__getProductDetails:
		if (p->size < 0)
			delete (struct __ns4__getProductDetails*)p->ptr;
		else
			delete[] (struct __ns4__getProductDetails*)p->ptr;
		break;
	case SOAP_TYPE___ns4__getCategoryList:
		if (p->size < 0)
			delete (struct __ns4__getCategoryList*)p->ptr;
		else
			delete[] (struct __ns4__getCategoryList*)p->ptr;
		break;
	case SOAP_TYPE___ns4__getBusinessList:
		if (p->size < 0)
			delete (struct __ns4__getBusinessList*)p->ptr;
		else
			delete[] (struct __ns4__getBusinessList*)p->ptr;
		break;
	case SOAP_TYPE___ns4__getProductList:
		if (p->size < 0)
			delete (struct __ns4__getProductList*)p->ptr;
		else
			delete[] (struct __ns4__getProductList*)p->ptr;
		break;
	case SOAP_TYPE___ns4__getBusinessDetails:
		if (p->size < 0)
			delete (struct __ns4__getBusinessDetails*)p->ptr;
		else
			delete[] (struct __ns4__getBusinessDetails*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__MProductOffer:
		if (p->size < 0)
			delete (std::vector<ns2__MProductOffer * >*)p->ptr;
		else
			delete[] (std::vector<ns2__MProductOffer * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__MProduct:
		if (p->size < 0)
			delete (std::vector<ns2__MProduct * >*)p->ptr;
		else
			delete[] (std::vector<ns2__MProduct * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__MBusinessCard:
		if (p->size < 0)
			delete (std::vector<ns2__MBusinessCard * >*)p->ptr;
		else
			delete[] (std::vector<ns2__MBusinessCard * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__MCategory:
		if (p->size < 0)
			delete (std::vector<ns2__MCategory * >*)p->ptr;
		else
			delete[] (std::vector<ns2__MCategory * >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__MProductOffer:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns2__MProductOffer * >*)p)[len] = *(ns2__MProductOffer **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__MProduct:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns2__MProduct * >*)p)[len] = *(ns2__MProduct **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__MBusinessCard:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns2__MBusinessCard * >*)p)[len] = *(ns2__MBusinessCard **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__MCategory:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns2__MCategory * >*)p)[len] = *(ns2__MCategory **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_float);
	if (soap_out_float(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{
	return soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _ns1__getProductListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons2__MProduct(soap, &this->_ns1__getProductListResponse::return_);
	/* transient soap skipped */
}

void _ns1__getProductListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons2__MProduct(soap, &this->_ns1__getProductListResponse::return_);
	/* transient soap skipped */
}

int _ns1__getProductListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getProductListResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__getProductListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getProductListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getProductListResponse(struct soap *soap, const char *tag, int id, const _ns1__getProductListResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getProductListResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:return");
	if (soap_out_std__vectorTemplateOfPointerTons2__MProduct(soap, "ns1:return", -1, &(a->_ns1__getProductListResponse::return_), "ns2:MProduct"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getProductListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getProductListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getProductListResponse * SOAP_FMAC4 soap_get__ns1__getProductListResponse(struct soap *soap, _ns1__getProductListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getProductListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__getProductListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getProductListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getProductListResponse * SOAP_FMAC4 soap_in__ns1__getProductListResponse(struct soap *soap, const char *tag, _ns1__getProductListResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getProductListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getProductListResponse, sizeof(_ns1__getProductListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getProductListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getProductListResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons2__MProduct(soap, "ns1:return", &(a->_ns1__getProductListResponse::return_), "ns2:MProduct"))
					continue;
			/* transient soap skipped */
			soap_check_result(soap, "ns1:return");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getProductListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getProductListResponse, 0, sizeof(_ns1__getProductListResponse), 0, soap_copy__ns1__getProductListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__getProductListResponse * SOAP_FMAC6 soap_new__ns1__getProductListResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__getProductListResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__getProductListResponse(struct soap *soap, _ns1__getProductListResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__getProductListResponse * SOAP_FMAC4 soap_instantiate__ns1__getProductListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getProductListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getProductListResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__getProductListResponse;
		if (size)
			*size = sizeof(_ns1__getProductListResponse);
		((_ns1__getProductListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__getProductListResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getProductListResponse);
		for (int i = 0; i < n; i++)
			((_ns1__getProductListResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getProductListResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getProductListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getProductListResponse %p -> %p\n", q, p));
	*(_ns1__getProductListResponse*)p = *(_ns1__getProductListResponse*)q;
}

void _ns1__getProductList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getProductList::param0 = NULL;
	this->_ns1__getProductList::param1 = NULL;
	this->_ns1__getProductList::param2 = NULL;
	this->_ns1__getProductList::param3 = NULL;
	/* transient soap skipped */
}

void _ns1__getProductList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->_ns1__getProductList::param0);
	soap_serialize_PointerToint(soap, &this->_ns1__getProductList::param1);
	soap_serialize_PointerToint(soap, &this->_ns1__getProductList::param2);
	soap_serialize_PointerToint(soap, &this->_ns1__getProductList::param3);
	/* transient soap skipped */
}

int _ns1__getProductList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getProductList);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__getProductList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getProductList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getProductList(struct soap *soap, const char *tag, int id, const _ns1__getProductList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getProductList), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:param0", -1, &(a->_ns1__getProductList::param0), "xsd:int"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:param1", -1, &(a->_ns1__getProductList::param1), "xsd:int"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:param2", -1, &(a->_ns1__getProductList::param2), "xsd:int"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:param3", -1, &(a->_ns1__getProductList::param3), "xsd:int"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getProductList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getProductList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getProductList * SOAP_FMAC4 soap_get__ns1__getProductList(struct soap *soap, _ns1__getProductList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getProductList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__getProductList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getProductList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getProductList * SOAP_FMAC4 soap_in__ns1__getProductList(struct soap *soap, const char *tag, _ns1__getProductList *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getProductList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getProductList, sizeof(_ns1__getProductList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getProductList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getProductList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_param01 = 1;
	size_t soap_flag_param11 = 1;
	size_t soap_flag_param21 = 1;
	size_t soap_flag_param31 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_param01 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:param0", &(a->_ns1__getProductList::param0), "xsd:int"))
				{	soap_flag_param01--;
					continue;
				}
			if (soap_flag_param11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:param1", &(a->_ns1__getProductList::param1), "xsd:int"))
				{	soap_flag_param11--;
					continue;
				}
			if (soap_flag_param21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:param2", &(a->_ns1__getProductList::param2), "xsd:int"))
				{	soap_flag_param21--;
					continue;
				}
			if (soap_flag_param31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:param3", &(a->_ns1__getProductList::param3), "xsd:int"))
				{	soap_flag_param31--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getProductList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getProductList, 0, sizeof(_ns1__getProductList), 0, soap_copy__ns1__getProductList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__getProductList * SOAP_FMAC6 soap_new__ns1__getProductList(struct soap *soap, int n)
{	return soap_instantiate__ns1__getProductList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__getProductList(struct soap *soap, _ns1__getProductList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__getProductList * SOAP_FMAC4 soap_instantiate__ns1__getProductList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getProductList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getProductList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__getProductList;
		if (size)
			*size = sizeof(_ns1__getProductList);
		((_ns1__getProductList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__getProductList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getProductList);
		for (int i = 0; i < n; i++)
			((_ns1__getProductList*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getProductList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getProductList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getProductList %p -> %p\n", q, p));
	*(_ns1__getProductList*)p = *(_ns1__getProductList*)q;
}

void _ns1__getProductDetailsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getProductDetailsResponse::return_ = NULL;
	/* transient soap skipped */
}

void _ns1__getProductDetailsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__MDetailedProduct(soap, &this->_ns1__getProductDetailsResponse::return_);
	/* transient soap skipped */
}

int _ns1__getProductDetailsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getProductDetailsResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__getProductDetailsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getProductDetailsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getProductDetailsResponse(struct soap *soap, const char *tag, int id, const _ns1__getProductDetailsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getProductDetailsResponse), type))
		return soap->error;
	if (a->return_)
		soap_element_result(soap, "ns1:return");
	if (soap_out_PointerTons2__MDetailedProduct(soap, "ns1:return", -1, &(a->_ns1__getProductDetailsResponse::return_), "ns2:MDetailedProduct"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getProductDetailsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getProductDetailsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getProductDetailsResponse * SOAP_FMAC4 soap_get__ns1__getProductDetailsResponse(struct soap *soap, _ns1__getProductDetailsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getProductDetailsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__getProductDetailsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getProductDetailsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getProductDetailsResponse * SOAP_FMAC4 soap_in__ns1__getProductDetailsResponse(struct soap *soap, const char *tag, _ns1__getProductDetailsResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getProductDetailsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getProductDetailsResponse, sizeof(_ns1__getProductDetailsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getProductDetailsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getProductDetailsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__MDetailedProduct(soap, "ns1:return", &(a->_ns1__getProductDetailsResponse::return_), "ns2:MDetailedProduct"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:return");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getProductDetailsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getProductDetailsResponse, 0, sizeof(_ns1__getProductDetailsResponse), 0, soap_copy__ns1__getProductDetailsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__getProductDetailsResponse * SOAP_FMAC6 soap_new__ns1__getProductDetailsResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__getProductDetailsResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__getProductDetailsResponse(struct soap *soap, _ns1__getProductDetailsResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__getProductDetailsResponse * SOAP_FMAC4 soap_instantiate__ns1__getProductDetailsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getProductDetailsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getProductDetailsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__getProductDetailsResponse;
		if (size)
			*size = sizeof(_ns1__getProductDetailsResponse);
		((_ns1__getProductDetailsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__getProductDetailsResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getProductDetailsResponse);
		for (int i = 0; i < n; i++)
			((_ns1__getProductDetailsResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getProductDetailsResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getProductDetailsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getProductDetailsResponse %p -> %p\n", q, p));
	*(_ns1__getProductDetailsResponse*)p = *(_ns1__getProductDetailsResponse*)q;
}

void _ns1__getProductDetails::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getProductDetails::param0 = NULL;
	this->_ns1__getProductDetails::param1 = NULL;
	/* transient soap skipped */
}

void _ns1__getProductDetails::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->_ns1__getProductDetails::param0);
	soap_serialize_PointerToint(soap, &this->_ns1__getProductDetails::param1);
	/* transient soap skipped */
}

int _ns1__getProductDetails::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getProductDetails);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__getProductDetails::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getProductDetails(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getProductDetails(struct soap *soap, const char *tag, int id, const _ns1__getProductDetails *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getProductDetails), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:param0", -1, &(a->_ns1__getProductDetails::param0), "xsd:int"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:param1", -1, &(a->_ns1__getProductDetails::param1), "xsd:int"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getProductDetails::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getProductDetails(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getProductDetails * SOAP_FMAC4 soap_get__ns1__getProductDetails(struct soap *soap, _ns1__getProductDetails *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getProductDetails(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__getProductDetails::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getProductDetails(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getProductDetails * SOAP_FMAC4 soap_in__ns1__getProductDetails(struct soap *soap, const char *tag, _ns1__getProductDetails *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getProductDetails *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getProductDetails, sizeof(_ns1__getProductDetails), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getProductDetails)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getProductDetails *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_param01 = 1;
	size_t soap_flag_param11 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_param01 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:param0", &(a->_ns1__getProductDetails::param0), "xsd:int"))
				{	soap_flag_param01--;
					continue;
				}
			if (soap_flag_param11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:param1", &(a->_ns1__getProductDetails::param1), "xsd:int"))
				{	soap_flag_param11--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getProductDetails *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getProductDetails, 0, sizeof(_ns1__getProductDetails), 0, soap_copy__ns1__getProductDetails);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__getProductDetails * SOAP_FMAC6 soap_new__ns1__getProductDetails(struct soap *soap, int n)
{	return soap_instantiate__ns1__getProductDetails(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__getProductDetails(struct soap *soap, _ns1__getProductDetails *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__getProductDetails * SOAP_FMAC4 soap_instantiate__ns1__getProductDetails(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getProductDetails(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getProductDetails, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__getProductDetails;
		if (size)
			*size = sizeof(_ns1__getProductDetails);
		((_ns1__getProductDetails*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__getProductDetails[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getProductDetails);
		for (int i = 0; i < n; i++)
			((_ns1__getProductDetails*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getProductDetails*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getProductDetails(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getProductDetails %p -> %p\n", q, p));
	*(_ns1__getProductDetails*)p = *(_ns1__getProductDetails*)q;
}

void _ns1__getBusinessDetailsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getBusinessDetailsResponse::return_ = NULL;
	/* transient soap skipped */
}

void _ns1__getBusinessDetailsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__MDetailedBusinessCard(soap, &this->_ns1__getBusinessDetailsResponse::return_);
	/* transient soap skipped */
}

int _ns1__getBusinessDetailsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getBusinessDetailsResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__getBusinessDetailsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getBusinessDetailsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getBusinessDetailsResponse(struct soap *soap, const char *tag, int id, const _ns1__getBusinessDetailsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getBusinessDetailsResponse), type))
		return soap->error;
	if (a->return_)
		soap_element_result(soap, "ns1:return");
	if (soap_out_PointerTons2__MDetailedBusinessCard(soap, "ns1:return", -1, &(a->_ns1__getBusinessDetailsResponse::return_), "ns2:MDetailedBusinessCard"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getBusinessDetailsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getBusinessDetailsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getBusinessDetailsResponse * SOAP_FMAC4 soap_get__ns1__getBusinessDetailsResponse(struct soap *soap, _ns1__getBusinessDetailsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getBusinessDetailsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__getBusinessDetailsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getBusinessDetailsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getBusinessDetailsResponse * SOAP_FMAC4 soap_in__ns1__getBusinessDetailsResponse(struct soap *soap, const char *tag, _ns1__getBusinessDetailsResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getBusinessDetailsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getBusinessDetailsResponse, sizeof(_ns1__getBusinessDetailsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getBusinessDetailsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getBusinessDetailsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__MDetailedBusinessCard(soap, "ns1:return", &(a->_ns1__getBusinessDetailsResponse::return_), "ns2:MDetailedBusinessCard"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:return");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getBusinessDetailsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getBusinessDetailsResponse, 0, sizeof(_ns1__getBusinessDetailsResponse), 0, soap_copy__ns1__getBusinessDetailsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__getBusinessDetailsResponse * SOAP_FMAC6 soap_new__ns1__getBusinessDetailsResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__getBusinessDetailsResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__getBusinessDetailsResponse(struct soap *soap, _ns1__getBusinessDetailsResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__getBusinessDetailsResponse * SOAP_FMAC4 soap_instantiate__ns1__getBusinessDetailsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getBusinessDetailsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getBusinessDetailsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__getBusinessDetailsResponse;
		if (size)
			*size = sizeof(_ns1__getBusinessDetailsResponse);
		((_ns1__getBusinessDetailsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__getBusinessDetailsResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getBusinessDetailsResponse);
		for (int i = 0; i < n; i++)
			((_ns1__getBusinessDetailsResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getBusinessDetailsResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getBusinessDetailsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getBusinessDetailsResponse %p -> %p\n", q, p));
	*(_ns1__getBusinessDetailsResponse*)p = *(_ns1__getBusinessDetailsResponse*)q;
}

void _ns1__getBusinessDetails::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getBusinessDetails::param0 = NULL;
	this->_ns1__getBusinessDetails::param1 = NULL;
	/* transient soap skipped */
}

void _ns1__getBusinessDetails::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->_ns1__getBusinessDetails::param0);
	soap_serialize_PointerToint(soap, &this->_ns1__getBusinessDetails::param1);
	/* transient soap skipped */
}

int _ns1__getBusinessDetails::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getBusinessDetails);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__getBusinessDetails::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getBusinessDetails(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getBusinessDetails(struct soap *soap, const char *tag, int id, const _ns1__getBusinessDetails *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getBusinessDetails), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:param0", -1, &(a->_ns1__getBusinessDetails::param0), "xsd:int"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:param1", -1, &(a->_ns1__getBusinessDetails::param1), "xsd:int"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getBusinessDetails::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getBusinessDetails(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getBusinessDetails * SOAP_FMAC4 soap_get__ns1__getBusinessDetails(struct soap *soap, _ns1__getBusinessDetails *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getBusinessDetails(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__getBusinessDetails::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getBusinessDetails(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getBusinessDetails * SOAP_FMAC4 soap_in__ns1__getBusinessDetails(struct soap *soap, const char *tag, _ns1__getBusinessDetails *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getBusinessDetails *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getBusinessDetails, sizeof(_ns1__getBusinessDetails), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getBusinessDetails)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getBusinessDetails *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_param01 = 1;
	size_t soap_flag_param11 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_param01 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:param0", &(a->_ns1__getBusinessDetails::param0), "xsd:int"))
				{	soap_flag_param01--;
					continue;
				}
			if (soap_flag_param11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:param1", &(a->_ns1__getBusinessDetails::param1), "xsd:int"))
				{	soap_flag_param11--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getBusinessDetails *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getBusinessDetails, 0, sizeof(_ns1__getBusinessDetails), 0, soap_copy__ns1__getBusinessDetails);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__getBusinessDetails * SOAP_FMAC6 soap_new__ns1__getBusinessDetails(struct soap *soap, int n)
{	return soap_instantiate__ns1__getBusinessDetails(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__getBusinessDetails(struct soap *soap, _ns1__getBusinessDetails *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__getBusinessDetails * SOAP_FMAC4 soap_instantiate__ns1__getBusinessDetails(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getBusinessDetails(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getBusinessDetails, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__getBusinessDetails;
		if (size)
			*size = sizeof(_ns1__getBusinessDetails);
		((_ns1__getBusinessDetails*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__getBusinessDetails[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getBusinessDetails);
		for (int i = 0; i < n; i++)
			((_ns1__getBusinessDetails*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getBusinessDetails*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getBusinessDetails(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getBusinessDetails %p -> %p\n", q, p));
	*(_ns1__getBusinessDetails*)p = *(_ns1__getBusinessDetails*)q;
}

void _ns1__getCategoryListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons2__MCategory(soap, &this->_ns1__getCategoryListResponse::return_);
	/* transient soap skipped */
}

void _ns1__getCategoryListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons2__MCategory(soap, &this->_ns1__getCategoryListResponse::return_);
	/* transient soap skipped */
}

int _ns1__getCategoryListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getCategoryListResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__getCategoryListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getCategoryListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getCategoryListResponse(struct soap *soap, const char *tag, int id, const _ns1__getCategoryListResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getCategoryListResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:return");
	if (soap_out_std__vectorTemplateOfPointerTons2__MCategory(soap, "ns1:return", -1, &(a->_ns1__getCategoryListResponse::return_), "ns2:MCategory"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getCategoryListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getCategoryListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getCategoryListResponse * SOAP_FMAC4 soap_get__ns1__getCategoryListResponse(struct soap *soap, _ns1__getCategoryListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getCategoryListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__getCategoryListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getCategoryListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getCategoryListResponse * SOAP_FMAC4 soap_in__ns1__getCategoryListResponse(struct soap *soap, const char *tag, _ns1__getCategoryListResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getCategoryListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getCategoryListResponse, sizeof(_ns1__getCategoryListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getCategoryListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getCategoryListResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons2__MCategory(soap, "ns1:return", &(a->_ns1__getCategoryListResponse::return_), "ns2:MCategory"))
					continue;
			/* transient soap skipped */
			soap_check_result(soap, "ns1:return");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getCategoryListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getCategoryListResponse, 0, sizeof(_ns1__getCategoryListResponse), 0, soap_copy__ns1__getCategoryListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__getCategoryListResponse * SOAP_FMAC6 soap_new__ns1__getCategoryListResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__getCategoryListResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__getCategoryListResponse(struct soap *soap, _ns1__getCategoryListResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__getCategoryListResponse * SOAP_FMAC4 soap_instantiate__ns1__getCategoryListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getCategoryListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getCategoryListResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__getCategoryListResponse;
		if (size)
			*size = sizeof(_ns1__getCategoryListResponse);
		((_ns1__getCategoryListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__getCategoryListResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getCategoryListResponse);
		for (int i = 0; i < n; i++)
			((_ns1__getCategoryListResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getCategoryListResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getCategoryListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getCategoryListResponse %p -> %p\n", q, p));
	*(_ns1__getCategoryListResponse*)p = *(_ns1__getCategoryListResponse*)q;
}

void _ns1__getCategoryList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getCategoryList::param0 = NULL;
	/* transient soap skipped */
}

void _ns1__getCategoryList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->_ns1__getCategoryList::param0);
	/* transient soap skipped */
}

int _ns1__getCategoryList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getCategoryList);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__getCategoryList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getCategoryList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getCategoryList(struct soap *soap, const char *tag, int id, const _ns1__getCategoryList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getCategoryList), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:param0", -1, &(a->_ns1__getCategoryList::param0), "xsd:int"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getCategoryList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getCategoryList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getCategoryList * SOAP_FMAC4 soap_get__ns1__getCategoryList(struct soap *soap, _ns1__getCategoryList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getCategoryList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__getCategoryList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getCategoryList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getCategoryList * SOAP_FMAC4 soap_in__ns1__getCategoryList(struct soap *soap, const char *tag, _ns1__getCategoryList *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getCategoryList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getCategoryList, sizeof(_ns1__getCategoryList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getCategoryList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getCategoryList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_param01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_param01 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:param0", &(a->_ns1__getCategoryList::param0), "xsd:int"))
				{	soap_flag_param01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getCategoryList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getCategoryList, 0, sizeof(_ns1__getCategoryList), 0, soap_copy__ns1__getCategoryList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__getCategoryList * SOAP_FMAC6 soap_new__ns1__getCategoryList(struct soap *soap, int n)
{	return soap_instantiate__ns1__getCategoryList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__getCategoryList(struct soap *soap, _ns1__getCategoryList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__getCategoryList * SOAP_FMAC4 soap_instantiate__ns1__getCategoryList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getCategoryList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getCategoryList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__getCategoryList;
		if (size)
			*size = sizeof(_ns1__getCategoryList);
		((_ns1__getCategoryList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__getCategoryList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getCategoryList);
		for (int i = 0; i < n; i++)
			((_ns1__getCategoryList*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getCategoryList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getCategoryList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getCategoryList %p -> %p\n", q, p));
	*(_ns1__getCategoryList*)p = *(_ns1__getCategoryList*)q;
}

void _ns1__getBusinessListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons2__MBusinessCard(soap, &this->_ns1__getBusinessListResponse::return_);
	/* transient soap skipped */
}

void _ns1__getBusinessListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons2__MBusinessCard(soap, &this->_ns1__getBusinessListResponse::return_);
	/* transient soap skipped */
}

int _ns1__getBusinessListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getBusinessListResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__getBusinessListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getBusinessListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getBusinessListResponse(struct soap *soap, const char *tag, int id, const _ns1__getBusinessListResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getBusinessListResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:return");
	if (soap_out_std__vectorTemplateOfPointerTons2__MBusinessCard(soap, "ns1:return", -1, &(a->_ns1__getBusinessListResponse::return_), "ns2:MBusinessCard"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getBusinessListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getBusinessListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getBusinessListResponse * SOAP_FMAC4 soap_get__ns1__getBusinessListResponse(struct soap *soap, _ns1__getBusinessListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getBusinessListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__getBusinessListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getBusinessListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getBusinessListResponse * SOAP_FMAC4 soap_in__ns1__getBusinessListResponse(struct soap *soap, const char *tag, _ns1__getBusinessListResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getBusinessListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getBusinessListResponse, sizeof(_ns1__getBusinessListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getBusinessListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getBusinessListResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons2__MBusinessCard(soap, "ns1:return", &(a->_ns1__getBusinessListResponse::return_), "ns2:MBusinessCard"))
					continue;
			/* transient soap skipped */
			soap_check_result(soap, "ns1:return");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getBusinessListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getBusinessListResponse, 0, sizeof(_ns1__getBusinessListResponse), 0, soap_copy__ns1__getBusinessListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__getBusinessListResponse * SOAP_FMAC6 soap_new__ns1__getBusinessListResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__getBusinessListResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__getBusinessListResponse(struct soap *soap, _ns1__getBusinessListResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__getBusinessListResponse * SOAP_FMAC4 soap_instantiate__ns1__getBusinessListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getBusinessListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getBusinessListResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__getBusinessListResponse;
		if (size)
			*size = sizeof(_ns1__getBusinessListResponse);
		((_ns1__getBusinessListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__getBusinessListResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getBusinessListResponse);
		for (int i = 0; i < n; i++)
			((_ns1__getBusinessListResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getBusinessListResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getBusinessListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getBusinessListResponse %p -> %p\n", q, p));
	*(_ns1__getBusinessListResponse*)p = *(_ns1__getBusinessListResponse*)q;
}

void _ns1__getBusinessList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getBusinessList::param0 = NULL;
	this->_ns1__getBusinessList::param1 = NULL;
	this->_ns1__getBusinessList::param2 = NULL;
	this->_ns1__getBusinessList::param3 = NULL;
	/* transient soap skipped */
}

void _ns1__getBusinessList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->_ns1__getBusinessList::param0);
	soap_serialize_PointerToint(soap, &this->_ns1__getBusinessList::param1);
	soap_serialize_PointerToint(soap, &this->_ns1__getBusinessList::param2);
	soap_serialize_PointerToint(soap, &this->_ns1__getBusinessList::param3);
	/* transient soap skipped */
}

int _ns1__getBusinessList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getBusinessList);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__getBusinessList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getBusinessList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getBusinessList(struct soap *soap, const char *tag, int id, const _ns1__getBusinessList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getBusinessList), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:param0", -1, &(a->_ns1__getBusinessList::param0), "xsd:int"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:param1", -1, &(a->_ns1__getBusinessList::param1), "xsd:int"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:param2", -1, &(a->_ns1__getBusinessList::param2), "xsd:int"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:param3", -1, &(a->_ns1__getBusinessList::param3), "xsd:int"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getBusinessList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getBusinessList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getBusinessList * SOAP_FMAC4 soap_get__ns1__getBusinessList(struct soap *soap, _ns1__getBusinessList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getBusinessList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__getBusinessList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getBusinessList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getBusinessList * SOAP_FMAC4 soap_in__ns1__getBusinessList(struct soap *soap, const char *tag, _ns1__getBusinessList *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getBusinessList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getBusinessList, sizeof(_ns1__getBusinessList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getBusinessList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getBusinessList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_param01 = 1;
	size_t soap_flag_param11 = 1;
	size_t soap_flag_param21 = 1;
	size_t soap_flag_param31 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_param01 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:param0", &(a->_ns1__getBusinessList::param0), "xsd:int"))
				{	soap_flag_param01--;
					continue;
				}
			if (soap_flag_param11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:param1", &(a->_ns1__getBusinessList::param1), "xsd:int"))
				{	soap_flag_param11--;
					continue;
				}
			if (soap_flag_param21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:param2", &(a->_ns1__getBusinessList::param2), "xsd:int"))
				{	soap_flag_param21--;
					continue;
				}
			if (soap_flag_param31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:param3", &(a->_ns1__getBusinessList::param3), "xsd:int"))
				{	soap_flag_param31--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getBusinessList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getBusinessList, 0, sizeof(_ns1__getBusinessList), 0, soap_copy__ns1__getBusinessList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__getBusinessList * SOAP_FMAC6 soap_new__ns1__getBusinessList(struct soap *soap, int n)
{	return soap_instantiate__ns1__getBusinessList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__getBusinessList(struct soap *soap, _ns1__getBusinessList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__getBusinessList * SOAP_FMAC4 soap_instantiate__ns1__getBusinessList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getBusinessList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getBusinessList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__getBusinessList;
		if (size)
			*size = sizeof(_ns1__getBusinessList);
		((_ns1__getBusinessList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__getBusinessList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getBusinessList);
		for (int i = 0; i < n; i++)
			((_ns1__getBusinessList*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getBusinessList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getBusinessList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getBusinessList %p -> %p\n", q, p));
	*(_ns1__getBusinessList*)p = *(_ns1__getBusinessList*)q;
}

void ns2__MProductOffer::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns2__MProductOffer::currency = NULL;
	this->ns2__MProductOffer::details = NULL;
	this->ns2__MProductOffer::id = NULL;
	this->ns2__MProductOffer::imageURL = NULL;
	this->ns2__MProductOffer::manufacturer = NULL;
	this->ns2__MProductOffer::model = NULL;
	this->ns2__MProductOffer::name = NULL;
	this->ns2__MProductOffer::price = NULL;
	this->ns2__MProductOffer::productURL = NULL;
	this->ns2__MProductOffer::shipmentCost = NULL;
	/* transient soap skipped */
}

void ns2__MProductOffer::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns2__MProductOffer::currency);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MProductOffer::details);
	soap_serialize_PointerToint(soap, &this->ns2__MProductOffer::id);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MProductOffer::imageURL);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MProductOffer::manufacturer);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MProductOffer::model);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MProductOffer::name);
	soap_serialize_PointerTofloat(soap, &this->ns2__MProductOffer::price);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MProductOffer::productURL);
	soap_serialize_PointerTofloat(soap, &this->ns2__MProductOffer::shipmentCost);
	/* transient soap skipped */
}

int ns2__MProductOffer::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__MProductOffer);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns2__MProductOffer::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__MProductOffer(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MProductOffer(struct soap *soap, const char *tag, int id, const ns2__MProductOffer *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__MProductOffer), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:currency", -1, &(a->ns2__MProductOffer::currency), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:details", -1, &(a->ns2__MProductOffer::details), "xsd:string"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns2:id", -1, &(a->ns2__MProductOffer::id), "xsd:int"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:imageURL", -1, &(a->ns2__MProductOffer::imageURL), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:manufacturer", -1, &(a->ns2__MProductOffer::manufacturer), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:model", -1, &(a->ns2__MProductOffer::model), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:name", -1, &(a->ns2__MProductOffer::name), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTofloat(soap, "ns2:price", -1, &(a->ns2__MProductOffer::price), "xsd:float"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:productURL", -1, &(a->ns2__MProductOffer::productURL), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTofloat(soap, "ns2:shipmentCost", -1, &(a->ns2__MProductOffer::shipmentCost), "xsd:float"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__MProductOffer::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__MProductOffer(soap, this, tag, type);
}

SOAP_FMAC3 ns2__MProductOffer * SOAP_FMAC4 soap_get_ns2__MProductOffer(struct soap *soap, ns2__MProductOffer *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__MProductOffer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns2__MProductOffer::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__MProductOffer(soap, tag, this, type);
}

SOAP_FMAC3 ns2__MProductOffer * SOAP_FMAC4 soap_in_ns2__MProductOffer(struct soap *soap, const char *tag, ns2__MProductOffer *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__MProductOffer *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__MProductOffer, sizeof(ns2__MProductOffer), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__MProductOffer)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__MProductOffer *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_currency1 = 1;
	size_t soap_flag_details1 = 1;
	size_t soap_flag_id1 = 1;
	size_t soap_flag_imageURL1 = 1;
	size_t soap_flag_manufacturer1 = 1;
	size_t soap_flag_model1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_price1 = 1;
	size_t soap_flag_productURL1 = 1;
	size_t soap_flag_shipmentCost1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_currency1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:currency", &(a->ns2__MProductOffer::currency), "xsd:string"))
				{	soap_flag_currency1--;
					continue;
				}
			if (soap_flag_details1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:details", &(a->ns2__MProductOffer::details), "xsd:string"))
				{	soap_flag_details1--;
					continue;
				}
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns2:id", &(a->ns2__MProductOffer::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_imageURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:imageURL", &(a->ns2__MProductOffer::imageURL), "xsd:string"))
				{	soap_flag_imageURL1--;
					continue;
				}
			if (soap_flag_manufacturer1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:manufacturer", &(a->ns2__MProductOffer::manufacturer), "xsd:string"))
				{	soap_flag_manufacturer1--;
					continue;
				}
			if (soap_flag_model1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:model", &(a->ns2__MProductOffer::model), "xsd:string"))
				{	soap_flag_model1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:name", &(a->ns2__MProductOffer::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_price1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofloat(soap, "ns2:price", &(a->ns2__MProductOffer::price), "xsd:float"))
				{	soap_flag_price1--;
					continue;
				}
			if (soap_flag_productURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:productURL", &(a->ns2__MProductOffer::productURL), "xsd:string"))
				{	soap_flag_productURL1--;
					continue;
				}
			if (soap_flag_shipmentCost1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofloat(soap, "ns2:shipmentCost", &(a->ns2__MProductOffer::shipmentCost), "xsd:float"))
				{	soap_flag_shipmentCost1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__MProductOffer *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__MProductOffer, 0, sizeof(ns2__MProductOffer), 0, soap_copy_ns2__MProductOffer);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns2__MProductOffer * SOAP_FMAC6 soap_new_ns2__MProductOffer(struct soap *soap, int n)
{	return soap_instantiate_ns2__MProductOffer(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__MProductOffer(struct soap *soap, ns2__MProductOffer *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns2__MProductOffer * SOAP_FMAC4 soap_instantiate_ns2__MProductOffer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__MProductOffer(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__MProductOffer, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns2__MProductOffer;
		if (size)
			*size = sizeof(ns2__MProductOffer);
		((ns2__MProductOffer*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns2__MProductOffer[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__MProductOffer);
		for (int i = 0; i < n; i++)
			((ns2__MProductOffer*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__MProductOffer*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MProductOffer(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__MProductOffer %p -> %p\n", q, p));
	*(ns2__MProductOffer*)p = *(ns2__MProductOffer*)q;
}

void ns2__MDetailedProduct::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns2__MDetailedProduct::amazonURL = NULL;
	soap_default_std__vectorTemplateOfPointerTons2__MProductOffer(soap, &this->ns2__MDetailedProduct::offers);
	this->ns2__MDetailedProduct::reviewURL = NULL;
	this->ns2__MProduct::stores = NULL;
	this->ns2__MItem::id = NULL;
	this->ns2__MItem::imageURL = NULL;
	this->ns2__MItem::name = NULL;
	/* transient soap skipped */
}

void ns2__MDetailedProduct::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns2__MDetailedProduct::amazonURL);
	soap_serialize_std__vectorTemplateOfPointerTons2__MProductOffer(soap, &this->ns2__MDetailedProduct::offers);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MDetailedProduct::reviewURL);
	soap_serialize_PointerToint(soap, &this->ns2__MProduct::stores);
	soap_serialize_PointerToint(soap, &this->ns2__MItem::id);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MItem::imageURL);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MItem::name);
	/* transient soap skipped */
}

int ns2__MDetailedProduct::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__MDetailedProduct);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns2__MDetailedProduct::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__MDetailedProduct(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MDetailedProduct(struct soap *soap, const char *tag, int id, const ns2__MDetailedProduct *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__MDetailedProduct), "ns2:MDetailedProduct"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns2:id", -1, &(a->ns2__MItem::id), "xsd:int"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:imageURL", -1, &(a->ns2__MItem::imageURL), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:name", -1, &(a->ns2__MItem::name), "xsd:string"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerToint(soap, "ns2:stores", -1, &(a->ns2__MProduct::stores), "xsd:int"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:amazonURL", -1, &(a->ns2__MDetailedProduct::amazonURL), "xsd:string"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons2__MProductOffer(soap, "ns2:offers", -1, &(a->ns2__MDetailedProduct::offers), "ns2:MProductOffer"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:reviewURL", -1, &(a->ns2__MDetailedProduct::reviewURL), "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns2__MDetailedProduct::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__MDetailedProduct(soap, this, tag, type);
}

SOAP_FMAC3 ns2__MDetailedProduct * SOAP_FMAC4 soap_get_ns2__MDetailedProduct(struct soap *soap, ns2__MDetailedProduct *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__MDetailedProduct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns2__MDetailedProduct::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__MDetailedProduct(soap, tag, this, type);
}

SOAP_FMAC3 ns2__MDetailedProduct * SOAP_FMAC4 soap_in_ns2__MDetailedProduct(struct soap *soap, const char *tag, ns2__MDetailedProduct *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__MDetailedProduct *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__MDetailedProduct, sizeof(ns2__MDetailedProduct), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__MDetailedProduct)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__MDetailedProduct *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id3 = 1;
	size_t soap_flag_imageURL3 = 1;
	size_t soap_flag_name3 = 1;
	size_t soap_flag_stores2 = 1;
	size_t soap_flag_amazonURL1 = 1;
	size_t soap_flag_reviewURL1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns2:id", &(a->ns2__MItem::id), "xsd:int"))
				{	soap_flag_id3--;
					continue;
				}
			if (soap_flag_imageURL3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:imageURL", &(a->ns2__MItem::imageURL), "xsd:string"))
				{	soap_flag_imageURL3--;
					continue;
				}
			if (soap_flag_name3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:name", &(a->ns2__MItem::name), "xsd:string"))
				{	soap_flag_name3--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_stores2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns2:stores", &(a->ns2__MProduct::stores), "xsd:int"))
				{	soap_flag_stores2--;
					continue;
				}
			if (soap_flag_amazonURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:amazonURL", &(a->ns2__MDetailedProduct::amazonURL), "xsd:string"))
				{	soap_flag_amazonURL1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons2__MProductOffer(soap, "ns2:offers", &(a->ns2__MDetailedProduct::offers), "ns2:MProductOffer"))
					continue;
			if (soap_flag_reviewURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:reviewURL", &(a->ns2__MDetailedProduct::reviewURL), "xsd:string"))
				{	soap_flag_reviewURL1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__MDetailedProduct *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__MDetailedProduct, 0, sizeof(ns2__MDetailedProduct), 0, soap_copy_ns2__MDetailedProduct);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns2__MDetailedProduct * SOAP_FMAC6 soap_new_ns2__MDetailedProduct(struct soap *soap, int n)
{	return soap_instantiate_ns2__MDetailedProduct(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__MDetailedProduct(struct soap *soap, ns2__MDetailedProduct *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns2__MDetailedProduct * SOAP_FMAC4 soap_instantiate_ns2__MDetailedProduct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__MDetailedProduct(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__MDetailedProduct, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns2__MDetailedProduct;
		if (size)
			*size = sizeof(ns2__MDetailedProduct);
		((ns2__MDetailedProduct*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns2__MDetailedProduct[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__MDetailedProduct);
		for (int i = 0; i < n; i++)
			((ns2__MDetailedProduct*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__MDetailedProduct*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MDetailedProduct(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__MDetailedProduct %p -> %p\n", q, p));
	*(ns2__MDetailedProduct*)p = *(ns2__MDetailedProduct*)q;
}

void ns2__MProduct::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns2__MProduct::stores = NULL;
	this->ns2__MItem::id = NULL;
	this->ns2__MItem::imageURL = NULL;
	this->ns2__MItem::name = NULL;
	/* transient soap skipped */
}

void ns2__MProduct::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->ns2__MProduct::stores);
	soap_serialize_PointerToint(soap, &this->ns2__MItem::id);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MItem::imageURL);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MItem::name);
	/* transient soap skipped */
}

int ns2__MProduct::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__MProduct);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns2__MProduct::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__MProduct(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MProduct(struct soap *soap, const char *tag, int id, const ns2__MProduct *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__MProduct), "ns2:MProduct"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns2:id", -1, &(a->ns2__MItem::id), "xsd:int"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:imageURL", -1, &(a->ns2__MItem::imageURL), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:name", -1, &(a->ns2__MItem::name), "xsd:string"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerToint(soap, "ns2:stores", -1, &(a->ns2__MProduct::stores), "xsd:int"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns2__MProduct::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__MProduct(soap, this, tag, type);
}

SOAP_FMAC3 ns2__MProduct * SOAP_FMAC4 soap_get_ns2__MProduct(struct soap *soap, ns2__MProduct *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__MProduct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns2__MProduct::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__MProduct(soap, tag, this, type);
}

SOAP_FMAC3 ns2__MProduct * SOAP_FMAC4 soap_in_ns2__MProduct(struct soap *soap, const char *tag, ns2__MProduct *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__MProduct *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__MProduct, sizeof(ns2__MProduct), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__MProduct)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__MProduct *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id2 = 1;
	size_t soap_flag_imageURL2 = 1;
	size_t soap_flag_name2 = 1;
	size_t soap_flag_stores1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns2:id", &(a->ns2__MItem::id), "xsd:int"))
				{	soap_flag_id2--;
					continue;
				}
			if (soap_flag_imageURL2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:imageURL", &(a->ns2__MItem::imageURL), "xsd:string"))
				{	soap_flag_imageURL2--;
					continue;
				}
			if (soap_flag_name2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:name", &(a->ns2__MItem::name), "xsd:string"))
				{	soap_flag_name2--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_stores1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns2:stores", &(a->ns2__MProduct::stores), "xsd:int"))
				{	soap_flag_stores1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__MProduct *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__MProduct, 0, sizeof(ns2__MProduct), 0, soap_copy_ns2__MProduct);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns2__MProduct * SOAP_FMAC6 soap_new_ns2__MProduct(struct soap *soap, int n)
{	return soap_instantiate_ns2__MProduct(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__MProduct(struct soap *soap, ns2__MProduct *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns2__MProduct * SOAP_FMAC4 soap_instantiate_ns2__MProduct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__MProduct(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__MProduct, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "ns2:MDetailedProduct"))
	{	cp->type = SOAP_TYPE_ns2__MDetailedProduct;
		if (n < 0)
		{	cp->ptr = (void*)new ns2__MDetailedProduct;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns2__MDetailedProduct);
			((ns2__MDetailedProduct*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ns2__MDetailedProduct[n];
			if (size)
				*size = n * sizeof(ns2__MDetailedProduct);
			for (int i = 0; i < n; i++)
				((ns2__MDetailedProduct*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns2__MDetailedProduct*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)new ns2__MProduct;
		if (size)
			*size = sizeof(ns2__MProduct);
		((ns2__MProduct*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns2__MProduct[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__MProduct);
		for (int i = 0; i < n; i++)
			((ns2__MProduct*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__MProduct*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MProduct(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__MProduct %p -> %p\n", q, p));
	*(ns2__MProduct*)p = *(ns2__MProduct*)q;
}

void ns2__MContactInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns2__MContactInfo::contactPerson = NULL;
	this->ns2__MContactInfo::email = NULL;
	this->ns2__MContactInfo::fax = NULL;
	this->ns2__MContactInfo::mobile = NULL;
	this->ns2__MContactInfo::phone = NULL;
	this->ns2__MContactInfo::website = NULL;
	/* transient soap skipped */
}

void ns2__MContactInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns2__MContactInfo::contactPerson);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MContactInfo::email);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MContactInfo::fax);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MContactInfo::mobile);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MContactInfo::phone);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MContactInfo::website);
	/* transient soap skipped */
}

int ns2__MContactInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__MContactInfo);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns2__MContactInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__MContactInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MContactInfo(struct soap *soap, const char *tag, int id, const ns2__MContactInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__MContactInfo), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:contactPerson", -1, &(a->ns2__MContactInfo::contactPerson), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:email", -1, &(a->ns2__MContactInfo::email), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:fax", -1, &(a->ns2__MContactInfo::fax), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:mobile", -1, &(a->ns2__MContactInfo::mobile), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:phone", -1, &(a->ns2__MContactInfo::phone), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:website", -1, &(a->ns2__MContactInfo::website), "xsd:string"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__MContactInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__MContactInfo(soap, this, tag, type);
}

SOAP_FMAC3 ns2__MContactInfo * SOAP_FMAC4 soap_get_ns2__MContactInfo(struct soap *soap, ns2__MContactInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__MContactInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns2__MContactInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__MContactInfo(soap, tag, this, type);
}

SOAP_FMAC3 ns2__MContactInfo * SOAP_FMAC4 soap_in_ns2__MContactInfo(struct soap *soap, const char *tag, ns2__MContactInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__MContactInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__MContactInfo, sizeof(ns2__MContactInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__MContactInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__MContactInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_contactPerson1 = 1;
	size_t soap_flag_email1 = 1;
	size_t soap_flag_fax1 = 1;
	size_t soap_flag_mobile1 = 1;
	size_t soap_flag_phone1 = 1;
	size_t soap_flag_website1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_contactPerson1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:contactPerson", &(a->ns2__MContactInfo::contactPerson), "xsd:string"))
				{	soap_flag_contactPerson1--;
					continue;
				}
			if (soap_flag_email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:email", &(a->ns2__MContactInfo::email), "xsd:string"))
				{	soap_flag_email1--;
					continue;
				}
			if (soap_flag_fax1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:fax", &(a->ns2__MContactInfo::fax), "xsd:string"))
				{	soap_flag_fax1--;
					continue;
				}
			if (soap_flag_mobile1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:mobile", &(a->ns2__MContactInfo::mobile), "xsd:string"))
				{	soap_flag_mobile1--;
					continue;
				}
			if (soap_flag_phone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:phone", &(a->ns2__MContactInfo::phone), "xsd:string"))
				{	soap_flag_phone1--;
					continue;
				}
			if (soap_flag_website1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:website", &(a->ns2__MContactInfo::website), "xsd:string"))
				{	soap_flag_website1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__MContactInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__MContactInfo, 0, sizeof(ns2__MContactInfo), 0, soap_copy_ns2__MContactInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns2__MContactInfo * SOAP_FMAC6 soap_new_ns2__MContactInfo(struct soap *soap, int n)
{	return soap_instantiate_ns2__MContactInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__MContactInfo(struct soap *soap, ns2__MContactInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns2__MContactInfo * SOAP_FMAC4 soap_instantiate_ns2__MContactInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__MContactInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__MContactInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns2__MContactInfo;
		if (size)
			*size = sizeof(ns2__MContactInfo);
		((ns2__MContactInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns2__MContactInfo[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__MContactInfo);
		for (int i = 0; i < n; i++)
			((ns2__MContactInfo*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__MContactInfo*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MContactInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__MContactInfo %p -> %p\n", q, p));
	*(ns2__MContactInfo*)p = *(ns2__MContactInfo*)q;
}

void ns2__MAddress::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns2__MAddress::area = NULL;
	this->ns2__MAddress::city = NULL;
	this->ns2__MAddress::street = NULL;
	this->ns2__MAddress::zipCode = NULL;
	/* transient soap skipped */
}

void ns2__MAddress::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns2__MAddress::area);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MAddress::city);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MAddress::street);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MAddress::zipCode);
	/* transient soap skipped */
}

int ns2__MAddress::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__MAddress);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns2__MAddress::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__MAddress(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MAddress(struct soap *soap, const char *tag, int id, const ns2__MAddress *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__MAddress), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:area", -1, &(a->ns2__MAddress::area), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:city", -1, &(a->ns2__MAddress::city), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:street", -1, &(a->ns2__MAddress::street), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:zipCode", -1, &(a->ns2__MAddress::zipCode), "xsd:string"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__MAddress::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__MAddress(soap, this, tag, type);
}

SOAP_FMAC3 ns2__MAddress * SOAP_FMAC4 soap_get_ns2__MAddress(struct soap *soap, ns2__MAddress *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__MAddress(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns2__MAddress::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__MAddress(soap, tag, this, type);
}

SOAP_FMAC3 ns2__MAddress * SOAP_FMAC4 soap_in_ns2__MAddress(struct soap *soap, const char *tag, ns2__MAddress *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__MAddress *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__MAddress, sizeof(ns2__MAddress), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__MAddress)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__MAddress *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_area1 = 1;
	size_t soap_flag_city1 = 1;
	size_t soap_flag_street1 = 1;
	size_t soap_flag_zipCode1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_area1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:area", &(a->ns2__MAddress::area), "xsd:string"))
				{	soap_flag_area1--;
					continue;
				}
			if (soap_flag_city1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:city", &(a->ns2__MAddress::city), "xsd:string"))
				{	soap_flag_city1--;
					continue;
				}
			if (soap_flag_street1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:street", &(a->ns2__MAddress::street), "xsd:string"))
				{	soap_flag_street1--;
					continue;
				}
			if (soap_flag_zipCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:zipCode", &(a->ns2__MAddress::zipCode), "xsd:string"))
				{	soap_flag_zipCode1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__MAddress *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__MAddress, 0, sizeof(ns2__MAddress), 0, soap_copy_ns2__MAddress);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns2__MAddress * SOAP_FMAC6 soap_new_ns2__MAddress(struct soap *soap, int n)
{	return soap_instantiate_ns2__MAddress(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__MAddress(struct soap *soap, ns2__MAddress *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns2__MAddress * SOAP_FMAC4 soap_instantiate_ns2__MAddress(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__MAddress(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__MAddress, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns2__MAddress;
		if (size)
			*size = sizeof(ns2__MAddress);
		((ns2__MAddress*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns2__MAddress[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__MAddress);
		for (int i = 0; i < n; i++)
			((ns2__MAddress*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__MAddress*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MAddress(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__MAddress %p -> %p\n", q, p));
	*(ns2__MAddress*)p = *(ns2__MAddress*)q;
}

void ns2__MDetailedBusinessCard::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns2__MDetailedBusinessCard::address = NULL;
	this->ns2__MDetailedBusinessCard::contact = NULL;
	this->ns2__MBusinessCard::vipLevel = NULL;
	this->ns2__MItem::id = NULL;
	this->ns2__MItem::imageURL = NULL;
	this->ns2__MItem::name = NULL;
	/* transient soap skipped */
}

void ns2__MDetailedBusinessCard::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__MAddress(soap, &this->ns2__MDetailedBusinessCard::address);
	soap_serialize_PointerTons2__MContactInfo(soap, &this->ns2__MDetailedBusinessCard::contact);
	soap_serialize_PointerToint(soap, &this->ns2__MBusinessCard::vipLevel);
	soap_serialize_PointerToint(soap, &this->ns2__MItem::id);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MItem::imageURL);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MItem::name);
	/* transient soap skipped */
}

int ns2__MDetailedBusinessCard::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__MDetailedBusinessCard);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns2__MDetailedBusinessCard::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__MDetailedBusinessCard(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MDetailedBusinessCard(struct soap *soap, const char *tag, int id, const ns2__MDetailedBusinessCard *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__MDetailedBusinessCard), "ns2:MDetailedBusinessCard"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns2:id", -1, &(a->ns2__MItem::id), "xsd:int"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:imageURL", -1, &(a->ns2__MItem::imageURL), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:name", -1, &(a->ns2__MItem::name), "xsd:string"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerToint(soap, "ns2:vipLevel", -1, &(a->ns2__MBusinessCard::vipLevel), "xsd:int"))
		return soap->error;
	if (soap_out_PointerTons2__MAddress(soap, "ns2:address", -1, &(a->ns2__MDetailedBusinessCard::address), "ns2:MAddress"))
		return soap->error;
	if (soap_out_PointerTons2__MContactInfo(soap, "ns2:contact", -1, &(a->ns2__MDetailedBusinessCard::contact), "ns2:MContactInfo"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns2__MDetailedBusinessCard::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__MDetailedBusinessCard(soap, this, tag, type);
}

SOAP_FMAC3 ns2__MDetailedBusinessCard * SOAP_FMAC4 soap_get_ns2__MDetailedBusinessCard(struct soap *soap, ns2__MDetailedBusinessCard *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__MDetailedBusinessCard(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns2__MDetailedBusinessCard::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__MDetailedBusinessCard(soap, tag, this, type);
}

SOAP_FMAC3 ns2__MDetailedBusinessCard * SOAP_FMAC4 soap_in_ns2__MDetailedBusinessCard(struct soap *soap, const char *tag, ns2__MDetailedBusinessCard *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__MDetailedBusinessCard *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__MDetailedBusinessCard, sizeof(ns2__MDetailedBusinessCard), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__MDetailedBusinessCard)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__MDetailedBusinessCard *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id3 = 1;
	size_t soap_flag_imageURL3 = 1;
	size_t soap_flag_name3 = 1;
	size_t soap_flag_vipLevel2 = 1;
	size_t soap_flag_address1 = 1;
	size_t soap_flag_contact1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns2:id", &(a->ns2__MItem::id), "xsd:int"))
				{	soap_flag_id3--;
					continue;
				}
			if (soap_flag_imageURL3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:imageURL", &(a->ns2__MItem::imageURL), "xsd:string"))
				{	soap_flag_imageURL3--;
					continue;
				}
			if (soap_flag_name3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:name", &(a->ns2__MItem::name), "xsd:string"))
				{	soap_flag_name3--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_vipLevel2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns2:vipLevel", &(a->ns2__MBusinessCard::vipLevel), "xsd:int"))
				{	soap_flag_vipLevel2--;
					continue;
				}
			if (soap_flag_address1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__MAddress(soap, "ns2:address", &(a->ns2__MDetailedBusinessCard::address), "ns2:MAddress"))
				{	soap_flag_address1--;
					continue;
				}
			if (soap_flag_contact1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__MContactInfo(soap, "ns2:contact", &(a->ns2__MDetailedBusinessCard::contact), "ns2:MContactInfo"))
				{	soap_flag_contact1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__MDetailedBusinessCard *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__MDetailedBusinessCard, 0, sizeof(ns2__MDetailedBusinessCard), 0, soap_copy_ns2__MDetailedBusinessCard);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns2__MDetailedBusinessCard * SOAP_FMAC6 soap_new_ns2__MDetailedBusinessCard(struct soap *soap, int n)
{	return soap_instantiate_ns2__MDetailedBusinessCard(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__MDetailedBusinessCard(struct soap *soap, ns2__MDetailedBusinessCard *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns2__MDetailedBusinessCard * SOAP_FMAC4 soap_instantiate_ns2__MDetailedBusinessCard(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__MDetailedBusinessCard(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__MDetailedBusinessCard, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns2__MDetailedBusinessCard;
		if (size)
			*size = sizeof(ns2__MDetailedBusinessCard);
		((ns2__MDetailedBusinessCard*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns2__MDetailedBusinessCard[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__MDetailedBusinessCard);
		for (int i = 0; i < n; i++)
			((ns2__MDetailedBusinessCard*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__MDetailedBusinessCard*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MDetailedBusinessCard(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__MDetailedBusinessCard %p -> %p\n", q, p));
	*(ns2__MDetailedBusinessCard*)p = *(ns2__MDetailedBusinessCard*)q;
}

void ns2__MCategory::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons2__MCategory(soap, &this->ns2__MCategory::childCategories);
	this->ns2__MCategory::id = NULL;
	this->ns2__MCategory::imageURL = NULL;
	this->ns2__MCategory::name = NULL;
	this->ns2__MCategory::totalItems = NULL;
	this->ns2__MCategory::type = NULL;
	/* transient soap skipped */
}

void ns2__MCategory::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons2__MCategory(soap, &this->ns2__MCategory::childCategories);
	soap_serialize_PointerToint(soap, &this->ns2__MCategory::id);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MCategory::imageURL);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MCategory::name);
	soap_serialize_PointerToint(soap, &this->ns2__MCategory::totalItems);
	soap_serialize_PointerToint(soap, &this->ns2__MCategory::type);
	/* transient soap skipped */
}

int ns2__MCategory::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__MCategory);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns2__MCategory::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__MCategory(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MCategory(struct soap *soap, const char *tag, int id, const ns2__MCategory *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__MCategory), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons2__MCategory(soap, "ns2:childCategories", -1, &(a->ns2__MCategory::childCategories), "ns2:MCategory"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns2:id", -1, &(a->ns2__MCategory::id), "xsd:int"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:imageURL", -1, &(a->ns2__MCategory::imageURL), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:name", -1, &(a->ns2__MCategory::name), "xsd:string"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns2:totalItems", -1, &(a->ns2__MCategory::totalItems), "xsd:int"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns2:type", -1, &(a->ns2__MCategory::type), "xsd:int"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__MCategory::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__MCategory(soap, this, tag, type);
}

SOAP_FMAC3 ns2__MCategory * SOAP_FMAC4 soap_get_ns2__MCategory(struct soap *soap, ns2__MCategory *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__MCategory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns2__MCategory::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__MCategory(soap, tag, this, type);
}

SOAP_FMAC3 ns2__MCategory * SOAP_FMAC4 soap_in_ns2__MCategory(struct soap *soap, const char *tag, ns2__MCategory *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__MCategory *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__MCategory, sizeof(ns2__MCategory), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__MCategory)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__MCategory *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_imageURL1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_totalItems1 = 1;
	size_t soap_flag_type1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons2__MCategory(soap, "ns2:childCategories", &(a->ns2__MCategory::childCategories), "ns2:MCategory"))
					continue;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns2:id", &(a->ns2__MCategory::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_imageURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:imageURL", &(a->ns2__MCategory::imageURL), "xsd:string"))
				{	soap_flag_imageURL1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:name", &(a->ns2__MCategory::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_totalItems1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns2:totalItems", &(a->ns2__MCategory::totalItems), "xsd:int"))
				{	soap_flag_totalItems1--;
					continue;
				}
			if (soap_flag_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns2:type", &(a->ns2__MCategory::type), "xsd:int"))
				{	soap_flag_type1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__MCategory *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__MCategory, 0, sizeof(ns2__MCategory), 0, soap_copy_ns2__MCategory);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns2__MCategory * SOAP_FMAC6 soap_new_ns2__MCategory(struct soap *soap, int n)
{	return soap_instantiate_ns2__MCategory(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__MCategory(struct soap *soap, ns2__MCategory *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns2__MCategory * SOAP_FMAC4 soap_instantiate_ns2__MCategory(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__MCategory(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__MCategory, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns2__MCategory;
		if (size)
			*size = sizeof(ns2__MCategory);
		((ns2__MCategory*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns2__MCategory[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__MCategory);
		for (int i = 0; i < n; i++)
			((ns2__MCategory*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__MCategory*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MCategory(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__MCategory %p -> %p\n", q, p));
	*(ns2__MCategory*)p = *(ns2__MCategory*)q;
}

void ns2__MBusinessCard::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns2__MBusinessCard::vipLevel = NULL;
	this->ns2__MItem::id = NULL;
	this->ns2__MItem::imageURL = NULL;
	this->ns2__MItem::name = NULL;
	/* transient soap skipped */
}

void ns2__MBusinessCard::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->ns2__MBusinessCard::vipLevel);
	soap_serialize_PointerToint(soap, &this->ns2__MItem::id);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MItem::imageURL);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MItem::name);
	/* transient soap skipped */
}

int ns2__MBusinessCard::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__MBusinessCard);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns2__MBusinessCard::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__MBusinessCard(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MBusinessCard(struct soap *soap, const char *tag, int id, const ns2__MBusinessCard *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__MBusinessCard), "ns2:MBusinessCard"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns2:id", -1, &(a->ns2__MItem::id), "xsd:int"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:imageURL", -1, &(a->ns2__MItem::imageURL), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:name", -1, &(a->ns2__MItem::name), "xsd:string"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerToint(soap, "ns2:vipLevel", -1, &(a->ns2__MBusinessCard::vipLevel), "xsd:int"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns2__MBusinessCard::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__MBusinessCard(soap, this, tag, type);
}

SOAP_FMAC3 ns2__MBusinessCard * SOAP_FMAC4 soap_get_ns2__MBusinessCard(struct soap *soap, ns2__MBusinessCard *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__MBusinessCard(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns2__MBusinessCard::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__MBusinessCard(soap, tag, this, type);
}

SOAP_FMAC3 ns2__MBusinessCard * SOAP_FMAC4 soap_in_ns2__MBusinessCard(struct soap *soap, const char *tag, ns2__MBusinessCard *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__MBusinessCard *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__MBusinessCard, sizeof(ns2__MBusinessCard), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__MBusinessCard)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__MBusinessCard *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id2 = 1;
	size_t soap_flag_imageURL2 = 1;
	size_t soap_flag_name2 = 1;
	size_t soap_flag_vipLevel1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns2:id", &(a->ns2__MItem::id), "xsd:int"))
				{	soap_flag_id2--;
					continue;
				}
			if (soap_flag_imageURL2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:imageURL", &(a->ns2__MItem::imageURL), "xsd:string"))
				{	soap_flag_imageURL2--;
					continue;
				}
			if (soap_flag_name2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:name", &(a->ns2__MItem::name), "xsd:string"))
				{	soap_flag_name2--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_vipLevel1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns2:vipLevel", &(a->ns2__MBusinessCard::vipLevel), "xsd:int"))
				{	soap_flag_vipLevel1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__MBusinessCard *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__MBusinessCard, 0, sizeof(ns2__MBusinessCard), 0, soap_copy_ns2__MBusinessCard);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns2__MBusinessCard * SOAP_FMAC6 soap_new_ns2__MBusinessCard(struct soap *soap, int n)
{	return soap_instantiate_ns2__MBusinessCard(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__MBusinessCard(struct soap *soap, ns2__MBusinessCard *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns2__MBusinessCard * SOAP_FMAC4 soap_instantiate_ns2__MBusinessCard(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__MBusinessCard(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__MBusinessCard, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "ns2:MDetailedBusinessCard"))
	{	cp->type = SOAP_TYPE_ns2__MDetailedBusinessCard;
		if (n < 0)
		{	cp->ptr = (void*)new ns2__MDetailedBusinessCard;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns2__MDetailedBusinessCard);
			((ns2__MDetailedBusinessCard*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ns2__MDetailedBusinessCard[n];
			if (size)
				*size = n * sizeof(ns2__MDetailedBusinessCard);
			for (int i = 0; i < n; i++)
				((ns2__MDetailedBusinessCard*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns2__MDetailedBusinessCard*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)new ns2__MBusinessCard;
		if (size)
			*size = sizeof(ns2__MBusinessCard);
		((ns2__MBusinessCard*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns2__MBusinessCard[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__MBusinessCard);
		for (int i = 0; i < n; i++)
			((ns2__MBusinessCard*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__MBusinessCard*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MBusinessCard(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__MBusinessCard %p -> %p\n", q, p));
	*(ns2__MBusinessCard*)p = *(ns2__MBusinessCard*)q;
}

void ns2__MItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns2__MItem::id = NULL;
	this->ns2__MItem::imageURL = NULL;
	this->ns2__MItem::name = NULL;
	/* transient soap skipped */
}

void ns2__MItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->ns2__MItem::id);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MItem::imageURL);
	soap_serialize_PointerTostd__string(soap, &this->ns2__MItem::name);
	/* transient soap skipped */
}

int ns2__MItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__MItem);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns2__MItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__MItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MItem(struct soap *soap, const char *tag, int id, const ns2__MItem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__MItem), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns2:id", -1, &(a->ns2__MItem::id), "xsd:int"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:imageURL", -1, &(a->ns2__MItem::imageURL), "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:name", -1, &(a->ns2__MItem::name), "xsd:string"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__MItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__MItem(soap, this, tag, type);
}

SOAP_FMAC3 ns2__MItem * SOAP_FMAC4 soap_get_ns2__MItem(struct soap *soap, ns2__MItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__MItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns2__MItem::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__MItem(soap, tag, this, type);
}

SOAP_FMAC3 ns2__MItem * SOAP_FMAC4 soap_in_ns2__MItem(struct soap *soap, const char *tag, ns2__MItem *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__MItem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__MItem, sizeof(ns2__MItem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__MItem)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__MItem *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_imageURL1 = 1;
	size_t soap_flag_name1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns2:id", &(a->ns2__MItem::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_imageURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:imageURL", &(a->ns2__MItem::imageURL), "xsd:string"))
				{	soap_flag_imageURL1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns2:name", &(a->ns2__MItem::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__MItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__MItem, 0, sizeof(ns2__MItem), 0, soap_copy_ns2__MItem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns2__MItem * SOAP_FMAC6 soap_new_ns2__MItem(struct soap *soap, int n)
{	return soap_instantiate_ns2__MItem(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__MItem(struct soap *soap, ns2__MItem *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns2__MItem * SOAP_FMAC4 soap_instantiate_ns2__MItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__MItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__MItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "ns2:MBusinessCard"))
	{	cp->type = SOAP_TYPE_ns2__MBusinessCard;
		if (n < 0)
		{	cp->ptr = (void*)new ns2__MBusinessCard;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns2__MBusinessCard);
			((ns2__MBusinessCard*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ns2__MBusinessCard[n];
			if (size)
				*size = n * sizeof(ns2__MBusinessCard);
			for (int i = 0; i < n; i++)
				((ns2__MBusinessCard*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns2__MBusinessCard*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns2:MProduct"))
	{	cp->type = SOAP_TYPE_ns2__MProduct;
		if (n < 0)
		{	cp->ptr = (void*)new ns2__MProduct;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns2__MProduct);
			((ns2__MProduct*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ns2__MProduct[n];
			if (size)
				*size = n * sizeof(ns2__MProduct);
			for (int i = 0; i < n; i++)
				((ns2__MProduct*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns2__MProduct*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns2:MDetailedBusinessCard"))
	{	cp->type = SOAP_TYPE_ns2__MDetailedBusinessCard;
		if (n < 0)
		{	cp->ptr = (void*)new ns2__MDetailedBusinessCard;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns2__MDetailedBusinessCard);
			((ns2__MDetailedBusinessCard*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ns2__MDetailedBusinessCard[n];
			if (size)
				*size = n * sizeof(ns2__MDetailedBusinessCard);
			for (int i = 0; i < n; i++)
				((ns2__MDetailedBusinessCard*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns2__MDetailedBusinessCard*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns2:MDetailedProduct"))
	{	cp->type = SOAP_TYPE_ns2__MDetailedProduct;
		if (n < 0)
		{	cp->ptr = (void*)new ns2__MDetailedProduct;
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns2__MDetailedProduct);
			((ns2__MDetailedProduct*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new ns2__MDetailedProduct[n];
			if (size)
				*size = n * sizeof(ns2__MDetailedProduct);
			for (int i = 0; i < n; i++)
				((ns2__MDetailedProduct*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns2__MDetailedProduct*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)new ns2__MItem;
		if (size)
			*size = sizeof(ns2__MItem);
		((ns2__MItem*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns2__MItem[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__MItem);
		for (int i = 0; i < n; i++)
			((ns2__MItem*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__MItem*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__MItem %p -> %p\n", q, p));
	*(ns2__MItem*)p = *(ns2__MItem*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, "xsd:string"))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__getBusinessDetails(struct soap *soap, struct __ns4__getBusinessDetails *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getBusinessDetails = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__getBusinessDetails(struct soap *soap, const struct __ns4__getBusinessDetails *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getBusinessDetails(soap, &a->ns1__getBusinessDetails);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__getBusinessDetails(struct soap *soap, const struct __ns4__getBusinessDetails *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__getBusinessDetails(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__getBusinessDetails(struct soap *soap, const char *tag, int id, const struct __ns4__getBusinessDetails *a, const char *type)
{
	if (soap_out_PointerTo_ns1__getBusinessDetails(soap, "ns1:getBusinessDetails", -1, &a->ns1__getBusinessDetails, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__getBusinessDetails * SOAP_FMAC4 soap_get___ns4__getBusinessDetails(struct soap *soap, struct __ns4__getBusinessDetails *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__getBusinessDetails(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__getBusinessDetails * SOAP_FMAC4 soap_in___ns4__getBusinessDetails(struct soap *soap, const char *tag, struct __ns4__getBusinessDetails *a, const char *type)
{
	size_t soap_flag_ns1__getBusinessDetails = 1;
	short soap_flag;
	a = (struct __ns4__getBusinessDetails *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__getBusinessDetails, sizeof(struct __ns4__getBusinessDetails), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__getBusinessDetails(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getBusinessDetails && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getBusinessDetails(soap, "ns1:getBusinessDetails", &a->ns1__getBusinessDetails, ""))
				{	soap_flag_ns1__getBusinessDetails--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__getBusinessDetails * SOAP_FMAC6 soap_new___ns4__getBusinessDetails(struct soap *soap, int n)
{	return soap_instantiate___ns4__getBusinessDetails(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__getBusinessDetails(struct soap *soap, struct __ns4__getBusinessDetails *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__getBusinessDetails * SOAP_FMAC4 soap_instantiate___ns4__getBusinessDetails(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__getBusinessDetails(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__getBusinessDetails, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__getBusinessDetails;
		if (size)
			*size = sizeof(struct __ns4__getBusinessDetails);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__getBusinessDetails[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__getBusinessDetails);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__getBusinessDetails*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__getBusinessDetails(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__getBusinessDetails %p -> %p\n", q, p));
	*(struct __ns4__getBusinessDetails*)p = *(struct __ns4__getBusinessDetails*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__getProductList(struct soap *soap, struct __ns4__getProductList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getProductList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__getProductList(struct soap *soap, const struct __ns4__getProductList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getProductList(soap, &a->ns1__getProductList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__getProductList(struct soap *soap, const struct __ns4__getProductList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__getProductList(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__getProductList(struct soap *soap, const char *tag, int id, const struct __ns4__getProductList *a, const char *type)
{
	if (soap_out_PointerTo_ns1__getProductList(soap, "ns1:getProductList", -1, &a->ns1__getProductList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__getProductList * SOAP_FMAC4 soap_get___ns4__getProductList(struct soap *soap, struct __ns4__getProductList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__getProductList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__getProductList * SOAP_FMAC4 soap_in___ns4__getProductList(struct soap *soap, const char *tag, struct __ns4__getProductList *a, const char *type)
{
	size_t soap_flag_ns1__getProductList = 1;
	short soap_flag;
	a = (struct __ns4__getProductList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__getProductList, sizeof(struct __ns4__getProductList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__getProductList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getProductList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getProductList(soap, "ns1:getProductList", &a->ns1__getProductList, ""))
				{	soap_flag_ns1__getProductList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__getProductList * SOAP_FMAC6 soap_new___ns4__getProductList(struct soap *soap, int n)
{	return soap_instantiate___ns4__getProductList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__getProductList(struct soap *soap, struct __ns4__getProductList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__getProductList * SOAP_FMAC4 soap_instantiate___ns4__getProductList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__getProductList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__getProductList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__getProductList;
		if (size)
			*size = sizeof(struct __ns4__getProductList);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__getProductList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__getProductList);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__getProductList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__getProductList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__getProductList %p -> %p\n", q, p));
	*(struct __ns4__getProductList*)p = *(struct __ns4__getProductList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__getBusinessList(struct soap *soap, struct __ns4__getBusinessList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getBusinessList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__getBusinessList(struct soap *soap, const struct __ns4__getBusinessList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getBusinessList(soap, &a->ns1__getBusinessList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__getBusinessList(struct soap *soap, const struct __ns4__getBusinessList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__getBusinessList(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__getBusinessList(struct soap *soap, const char *tag, int id, const struct __ns4__getBusinessList *a, const char *type)
{
	if (soap_out_PointerTo_ns1__getBusinessList(soap, "ns1:getBusinessList", -1, &a->ns1__getBusinessList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__getBusinessList * SOAP_FMAC4 soap_get___ns4__getBusinessList(struct soap *soap, struct __ns4__getBusinessList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__getBusinessList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__getBusinessList * SOAP_FMAC4 soap_in___ns4__getBusinessList(struct soap *soap, const char *tag, struct __ns4__getBusinessList *a, const char *type)
{
	size_t soap_flag_ns1__getBusinessList = 1;
	short soap_flag;
	a = (struct __ns4__getBusinessList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__getBusinessList, sizeof(struct __ns4__getBusinessList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__getBusinessList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getBusinessList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getBusinessList(soap, "ns1:getBusinessList", &a->ns1__getBusinessList, ""))
				{	soap_flag_ns1__getBusinessList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__getBusinessList * SOAP_FMAC6 soap_new___ns4__getBusinessList(struct soap *soap, int n)
{	return soap_instantiate___ns4__getBusinessList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__getBusinessList(struct soap *soap, struct __ns4__getBusinessList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__getBusinessList * SOAP_FMAC4 soap_instantiate___ns4__getBusinessList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__getBusinessList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__getBusinessList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__getBusinessList;
		if (size)
			*size = sizeof(struct __ns4__getBusinessList);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__getBusinessList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__getBusinessList);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__getBusinessList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__getBusinessList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__getBusinessList %p -> %p\n", q, p));
	*(struct __ns4__getBusinessList*)p = *(struct __ns4__getBusinessList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__getCategoryList(struct soap *soap, struct __ns4__getCategoryList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getCategoryList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__getCategoryList(struct soap *soap, const struct __ns4__getCategoryList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getCategoryList(soap, &a->ns1__getCategoryList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__getCategoryList(struct soap *soap, const struct __ns4__getCategoryList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__getCategoryList(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__getCategoryList(struct soap *soap, const char *tag, int id, const struct __ns4__getCategoryList *a, const char *type)
{
	if (soap_out_PointerTo_ns1__getCategoryList(soap, "ns1:getCategoryList", -1, &a->ns1__getCategoryList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__getCategoryList * SOAP_FMAC4 soap_get___ns4__getCategoryList(struct soap *soap, struct __ns4__getCategoryList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__getCategoryList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__getCategoryList * SOAP_FMAC4 soap_in___ns4__getCategoryList(struct soap *soap, const char *tag, struct __ns4__getCategoryList *a, const char *type)
{
	size_t soap_flag_ns1__getCategoryList = 1;
	short soap_flag;
	a = (struct __ns4__getCategoryList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__getCategoryList, sizeof(struct __ns4__getCategoryList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__getCategoryList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getCategoryList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getCategoryList(soap, "ns1:getCategoryList", &a->ns1__getCategoryList, ""))
				{	soap_flag_ns1__getCategoryList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__getCategoryList * SOAP_FMAC6 soap_new___ns4__getCategoryList(struct soap *soap, int n)
{	return soap_instantiate___ns4__getCategoryList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__getCategoryList(struct soap *soap, struct __ns4__getCategoryList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__getCategoryList * SOAP_FMAC4 soap_instantiate___ns4__getCategoryList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__getCategoryList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__getCategoryList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__getCategoryList;
		if (size)
			*size = sizeof(struct __ns4__getCategoryList);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__getCategoryList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__getCategoryList);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__getCategoryList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__getCategoryList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__getCategoryList %p -> %p\n", q, p));
	*(struct __ns4__getCategoryList*)p = *(struct __ns4__getCategoryList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__getProductDetails(struct soap *soap, struct __ns4__getProductDetails *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getProductDetails = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__getProductDetails(struct soap *soap, const struct __ns4__getProductDetails *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getProductDetails(soap, &a->ns1__getProductDetails);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__getProductDetails(struct soap *soap, const struct __ns4__getProductDetails *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__getProductDetails(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__getProductDetails(struct soap *soap, const char *tag, int id, const struct __ns4__getProductDetails *a, const char *type)
{
	if (soap_out_PointerTo_ns1__getProductDetails(soap, "ns1:getProductDetails", -1, &a->ns1__getProductDetails, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__getProductDetails * SOAP_FMAC4 soap_get___ns4__getProductDetails(struct soap *soap, struct __ns4__getProductDetails *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__getProductDetails(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__getProductDetails * SOAP_FMAC4 soap_in___ns4__getProductDetails(struct soap *soap, const char *tag, struct __ns4__getProductDetails *a, const char *type)
{
	size_t soap_flag_ns1__getProductDetails = 1;
	short soap_flag;
	a = (struct __ns4__getProductDetails *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__getProductDetails, sizeof(struct __ns4__getProductDetails), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__getProductDetails(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getProductDetails && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getProductDetails(soap, "ns1:getProductDetails", &a->ns1__getProductDetails, ""))
				{	soap_flag_ns1__getProductDetails--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__getProductDetails * SOAP_FMAC6 soap_new___ns4__getProductDetails(struct soap *soap, int n)
{	return soap_instantiate___ns4__getProductDetails(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__getProductDetails(struct soap *soap, struct __ns4__getProductDetails *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__getProductDetails * SOAP_FMAC4 soap_instantiate___ns4__getProductDetails(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__getProductDetails(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__getProductDetails, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__getProductDetails;
		if (size)
			*size = sizeof(struct __ns4__getProductDetails);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__getProductDetails[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__getProductDetails);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__getProductDetails*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__getProductDetails(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__getProductDetails %p -> %p\n", q, p));
	*(struct __ns4__getProductDetails*)p = *(struct __ns4__getProductDetails*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__getBusinessDetails(struct soap *soap, struct __ns3__getBusinessDetails *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getBusinessDetails = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__getBusinessDetails(struct soap *soap, const struct __ns3__getBusinessDetails *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getBusinessDetails(soap, &a->ns1__getBusinessDetails);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__getBusinessDetails(struct soap *soap, const struct __ns3__getBusinessDetails *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__getBusinessDetails(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__getBusinessDetails(struct soap *soap, const char *tag, int id, const struct __ns3__getBusinessDetails *a, const char *type)
{
	if (soap_out_PointerTo_ns1__getBusinessDetails(soap, "ns1:getBusinessDetails", -1, &a->ns1__getBusinessDetails, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__getBusinessDetails * SOAP_FMAC4 soap_get___ns3__getBusinessDetails(struct soap *soap, struct __ns3__getBusinessDetails *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__getBusinessDetails(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__getBusinessDetails * SOAP_FMAC4 soap_in___ns3__getBusinessDetails(struct soap *soap, const char *tag, struct __ns3__getBusinessDetails *a, const char *type)
{
	size_t soap_flag_ns1__getBusinessDetails = 1;
	short soap_flag;
	a = (struct __ns3__getBusinessDetails *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__getBusinessDetails, sizeof(struct __ns3__getBusinessDetails), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__getBusinessDetails(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getBusinessDetails && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getBusinessDetails(soap, "ns1:getBusinessDetails", &a->ns1__getBusinessDetails, ""))
				{	soap_flag_ns1__getBusinessDetails--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__getBusinessDetails * SOAP_FMAC6 soap_new___ns3__getBusinessDetails(struct soap *soap, int n)
{	return soap_instantiate___ns3__getBusinessDetails(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__getBusinessDetails(struct soap *soap, struct __ns3__getBusinessDetails *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__getBusinessDetails * SOAP_FMAC4 soap_instantiate___ns3__getBusinessDetails(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__getBusinessDetails(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__getBusinessDetails, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__getBusinessDetails;
		if (size)
			*size = sizeof(struct __ns3__getBusinessDetails);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__getBusinessDetails[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__getBusinessDetails);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__getBusinessDetails*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__getBusinessDetails(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__getBusinessDetails %p -> %p\n", q, p));
	*(struct __ns3__getBusinessDetails*)p = *(struct __ns3__getBusinessDetails*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__getProductList(struct soap *soap, struct __ns3__getProductList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getProductList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__getProductList(struct soap *soap, const struct __ns3__getProductList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getProductList(soap, &a->ns1__getProductList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__getProductList(struct soap *soap, const struct __ns3__getProductList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__getProductList(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__getProductList(struct soap *soap, const char *tag, int id, const struct __ns3__getProductList *a, const char *type)
{
	if (soap_out_PointerTo_ns1__getProductList(soap, "ns1:getProductList", -1, &a->ns1__getProductList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__getProductList * SOAP_FMAC4 soap_get___ns3__getProductList(struct soap *soap, struct __ns3__getProductList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__getProductList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__getProductList * SOAP_FMAC4 soap_in___ns3__getProductList(struct soap *soap, const char *tag, struct __ns3__getProductList *a, const char *type)
{
	size_t soap_flag_ns1__getProductList = 1;
	short soap_flag;
	a = (struct __ns3__getProductList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__getProductList, sizeof(struct __ns3__getProductList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__getProductList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getProductList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getProductList(soap, "ns1:getProductList", &a->ns1__getProductList, ""))
				{	soap_flag_ns1__getProductList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__getProductList * SOAP_FMAC6 soap_new___ns3__getProductList(struct soap *soap, int n)
{	return soap_instantiate___ns3__getProductList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__getProductList(struct soap *soap, struct __ns3__getProductList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__getProductList * SOAP_FMAC4 soap_instantiate___ns3__getProductList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__getProductList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__getProductList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__getProductList;
		if (size)
			*size = sizeof(struct __ns3__getProductList);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__getProductList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__getProductList);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__getProductList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__getProductList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__getProductList %p -> %p\n", q, p));
	*(struct __ns3__getProductList*)p = *(struct __ns3__getProductList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__getBusinessList(struct soap *soap, struct __ns3__getBusinessList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getBusinessList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__getBusinessList(struct soap *soap, const struct __ns3__getBusinessList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getBusinessList(soap, &a->ns1__getBusinessList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__getBusinessList(struct soap *soap, const struct __ns3__getBusinessList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__getBusinessList(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__getBusinessList(struct soap *soap, const char *tag, int id, const struct __ns3__getBusinessList *a, const char *type)
{
	if (soap_out_PointerTo_ns1__getBusinessList(soap, "ns1:getBusinessList", -1, &a->ns1__getBusinessList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__getBusinessList * SOAP_FMAC4 soap_get___ns3__getBusinessList(struct soap *soap, struct __ns3__getBusinessList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__getBusinessList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__getBusinessList * SOAP_FMAC4 soap_in___ns3__getBusinessList(struct soap *soap, const char *tag, struct __ns3__getBusinessList *a, const char *type)
{
	size_t soap_flag_ns1__getBusinessList = 1;
	short soap_flag;
	a = (struct __ns3__getBusinessList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__getBusinessList, sizeof(struct __ns3__getBusinessList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__getBusinessList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getBusinessList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getBusinessList(soap, "ns1:getBusinessList", &a->ns1__getBusinessList, ""))
				{	soap_flag_ns1__getBusinessList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__getBusinessList * SOAP_FMAC6 soap_new___ns3__getBusinessList(struct soap *soap, int n)
{	return soap_instantiate___ns3__getBusinessList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__getBusinessList(struct soap *soap, struct __ns3__getBusinessList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__getBusinessList * SOAP_FMAC4 soap_instantiate___ns3__getBusinessList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__getBusinessList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__getBusinessList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__getBusinessList;
		if (size)
			*size = sizeof(struct __ns3__getBusinessList);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__getBusinessList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__getBusinessList);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__getBusinessList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__getBusinessList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__getBusinessList %p -> %p\n", q, p));
	*(struct __ns3__getBusinessList*)p = *(struct __ns3__getBusinessList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__getCategoryList(struct soap *soap, struct __ns3__getCategoryList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getCategoryList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__getCategoryList(struct soap *soap, const struct __ns3__getCategoryList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getCategoryList(soap, &a->ns1__getCategoryList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__getCategoryList(struct soap *soap, const struct __ns3__getCategoryList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__getCategoryList(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__getCategoryList(struct soap *soap, const char *tag, int id, const struct __ns3__getCategoryList *a, const char *type)
{
	if (soap_out_PointerTo_ns1__getCategoryList(soap, "ns1:getCategoryList", -1, &a->ns1__getCategoryList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__getCategoryList * SOAP_FMAC4 soap_get___ns3__getCategoryList(struct soap *soap, struct __ns3__getCategoryList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__getCategoryList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__getCategoryList * SOAP_FMAC4 soap_in___ns3__getCategoryList(struct soap *soap, const char *tag, struct __ns3__getCategoryList *a, const char *type)
{
	size_t soap_flag_ns1__getCategoryList = 1;
	short soap_flag;
	a = (struct __ns3__getCategoryList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__getCategoryList, sizeof(struct __ns3__getCategoryList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__getCategoryList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getCategoryList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getCategoryList(soap, "ns1:getCategoryList", &a->ns1__getCategoryList, ""))
				{	soap_flag_ns1__getCategoryList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__getCategoryList * SOAP_FMAC6 soap_new___ns3__getCategoryList(struct soap *soap, int n)
{	return soap_instantiate___ns3__getCategoryList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__getCategoryList(struct soap *soap, struct __ns3__getCategoryList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__getCategoryList * SOAP_FMAC4 soap_instantiate___ns3__getCategoryList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__getCategoryList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__getCategoryList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__getCategoryList;
		if (size)
			*size = sizeof(struct __ns3__getCategoryList);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__getCategoryList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__getCategoryList);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__getCategoryList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__getCategoryList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__getCategoryList %p -> %p\n", q, p));
	*(struct __ns3__getCategoryList*)p = *(struct __ns3__getCategoryList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__getProductDetails(struct soap *soap, struct __ns3__getProductDetails *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getProductDetails = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__getProductDetails(struct soap *soap, const struct __ns3__getProductDetails *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getProductDetails(soap, &a->ns1__getProductDetails);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__getProductDetails(struct soap *soap, const struct __ns3__getProductDetails *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__getProductDetails(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__getProductDetails(struct soap *soap, const char *tag, int id, const struct __ns3__getProductDetails *a, const char *type)
{
	if (soap_out_PointerTo_ns1__getProductDetails(soap, "ns1:getProductDetails", -1, &a->ns1__getProductDetails, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__getProductDetails * SOAP_FMAC4 soap_get___ns3__getProductDetails(struct soap *soap, struct __ns3__getProductDetails *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__getProductDetails(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__getProductDetails * SOAP_FMAC4 soap_in___ns3__getProductDetails(struct soap *soap, const char *tag, struct __ns3__getProductDetails *a, const char *type)
{
	size_t soap_flag_ns1__getProductDetails = 1;
	short soap_flag;
	a = (struct __ns3__getProductDetails *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__getProductDetails, sizeof(struct __ns3__getProductDetails), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__getProductDetails(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getProductDetails && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getProductDetails(soap, "ns1:getProductDetails", &a->ns1__getProductDetails, ""))
				{	soap_flag_ns1__getProductDetails--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__getProductDetails * SOAP_FMAC6 soap_new___ns3__getProductDetails(struct soap *soap, int n)
{	return soap_instantiate___ns3__getProductDetails(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__getProductDetails(struct soap *soap, struct __ns3__getProductDetails *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__getProductDetails * SOAP_FMAC4 soap_instantiate___ns3__getProductDetails(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__getProductDetails(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__getProductDetails, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__getProductDetails;
		if (size)
			*size = sizeof(struct __ns3__getProductDetails);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__getProductDetails[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__getProductDetails);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__getProductDetails*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__getProductDetails(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__getProductDetails %p -> %p\n", q, p));
	*(struct __ns3__getProductDetails*)p = *(struct __ns3__getProductDetails*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getBusinessDetailsResponse(struct soap *soap, _ns1__getBusinessDetailsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getBusinessDetailsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getBusinessDetailsResponse(struct soap *soap, _ns1__getBusinessDetailsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getBusinessDetailsResponse);
	if (soap_out_PointerTo_ns1__getBusinessDetailsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getBusinessDetailsResponse(struct soap *soap, const char *tag, int id, _ns1__getBusinessDetailsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getBusinessDetailsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getBusinessDetailsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getBusinessDetailsResponse(struct soap *soap, _ns1__getBusinessDetailsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getBusinessDetailsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__getBusinessDetailsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getBusinessDetailsResponse(struct soap *soap, const char *tag, _ns1__getBusinessDetailsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getBusinessDetailsResponse **)soap_malloc(soap, sizeof(_ns1__getBusinessDetailsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getBusinessDetailsResponse *)soap_instantiate__ns1__getBusinessDetailsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getBusinessDetailsResponse ** p = (_ns1__getBusinessDetailsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getBusinessDetailsResponse, sizeof(_ns1__getBusinessDetailsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getBusinessDetails(struct soap *soap, _ns1__getBusinessDetails *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getBusinessDetails))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getBusinessDetails(struct soap *soap, _ns1__getBusinessDetails *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getBusinessDetails);
	if (soap_out_PointerTo_ns1__getBusinessDetails(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getBusinessDetails(struct soap *soap, const char *tag, int id, _ns1__getBusinessDetails *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getBusinessDetails);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getBusinessDetails ** SOAP_FMAC4 soap_get_PointerTo_ns1__getBusinessDetails(struct soap *soap, _ns1__getBusinessDetails **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getBusinessDetails(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__getBusinessDetails ** SOAP_FMAC4 soap_in_PointerTo_ns1__getBusinessDetails(struct soap *soap, const char *tag, _ns1__getBusinessDetails **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getBusinessDetails **)soap_malloc(soap, sizeof(_ns1__getBusinessDetails *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getBusinessDetails *)soap_instantiate__ns1__getBusinessDetails(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getBusinessDetails ** p = (_ns1__getBusinessDetails **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getBusinessDetails, sizeof(_ns1__getBusinessDetails), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getProductListResponse(struct soap *soap, _ns1__getProductListResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getProductListResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getProductListResponse(struct soap *soap, _ns1__getProductListResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getProductListResponse);
	if (soap_out_PointerTo_ns1__getProductListResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getProductListResponse(struct soap *soap, const char *tag, int id, _ns1__getProductListResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getProductListResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getProductListResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getProductListResponse(struct soap *soap, _ns1__getProductListResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getProductListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__getProductListResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getProductListResponse(struct soap *soap, const char *tag, _ns1__getProductListResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getProductListResponse **)soap_malloc(soap, sizeof(_ns1__getProductListResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getProductListResponse *)soap_instantiate__ns1__getProductListResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getProductListResponse ** p = (_ns1__getProductListResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getProductListResponse, sizeof(_ns1__getProductListResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getProductList(struct soap *soap, _ns1__getProductList *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getProductList))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getProductList(struct soap *soap, _ns1__getProductList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getProductList);
	if (soap_out_PointerTo_ns1__getProductList(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getProductList(struct soap *soap, const char *tag, int id, _ns1__getProductList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getProductList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getProductList ** SOAP_FMAC4 soap_get_PointerTo_ns1__getProductList(struct soap *soap, _ns1__getProductList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getProductList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__getProductList ** SOAP_FMAC4 soap_in_PointerTo_ns1__getProductList(struct soap *soap, const char *tag, _ns1__getProductList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getProductList **)soap_malloc(soap, sizeof(_ns1__getProductList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getProductList *)soap_instantiate__ns1__getProductList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getProductList ** p = (_ns1__getProductList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getProductList, sizeof(_ns1__getProductList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getBusinessListResponse(struct soap *soap, _ns1__getBusinessListResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getBusinessListResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getBusinessListResponse(struct soap *soap, _ns1__getBusinessListResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getBusinessListResponse);
	if (soap_out_PointerTo_ns1__getBusinessListResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getBusinessListResponse(struct soap *soap, const char *tag, int id, _ns1__getBusinessListResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getBusinessListResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getBusinessListResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getBusinessListResponse(struct soap *soap, _ns1__getBusinessListResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getBusinessListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__getBusinessListResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getBusinessListResponse(struct soap *soap, const char *tag, _ns1__getBusinessListResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getBusinessListResponse **)soap_malloc(soap, sizeof(_ns1__getBusinessListResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getBusinessListResponse *)soap_instantiate__ns1__getBusinessListResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getBusinessListResponse ** p = (_ns1__getBusinessListResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getBusinessListResponse, sizeof(_ns1__getBusinessListResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getBusinessList(struct soap *soap, _ns1__getBusinessList *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getBusinessList))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getBusinessList(struct soap *soap, _ns1__getBusinessList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getBusinessList);
	if (soap_out_PointerTo_ns1__getBusinessList(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getBusinessList(struct soap *soap, const char *tag, int id, _ns1__getBusinessList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getBusinessList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getBusinessList ** SOAP_FMAC4 soap_get_PointerTo_ns1__getBusinessList(struct soap *soap, _ns1__getBusinessList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getBusinessList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__getBusinessList ** SOAP_FMAC4 soap_in_PointerTo_ns1__getBusinessList(struct soap *soap, const char *tag, _ns1__getBusinessList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getBusinessList **)soap_malloc(soap, sizeof(_ns1__getBusinessList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getBusinessList *)soap_instantiate__ns1__getBusinessList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getBusinessList ** p = (_ns1__getBusinessList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getBusinessList, sizeof(_ns1__getBusinessList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getCategoryListResponse(struct soap *soap, _ns1__getCategoryListResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getCategoryListResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getCategoryListResponse(struct soap *soap, _ns1__getCategoryListResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getCategoryListResponse);
	if (soap_out_PointerTo_ns1__getCategoryListResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getCategoryListResponse(struct soap *soap, const char *tag, int id, _ns1__getCategoryListResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getCategoryListResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getCategoryListResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getCategoryListResponse(struct soap *soap, _ns1__getCategoryListResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getCategoryListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__getCategoryListResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getCategoryListResponse(struct soap *soap, const char *tag, _ns1__getCategoryListResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getCategoryListResponse **)soap_malloc(soap, sizeof(_ns1__getCategoryListResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getCategoryListResponse *)soap_instantiate__ns1__getCategoryListResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getCategoryListResponse ** p = (_ns1__getCategoryListResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getCategoryListResponse, sizeof(_ns1__getCategoryListResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getCategoryList(struct soap *soap, _ns1__getCategoryList *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getCategoryList))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getCategoryList(struct soap *soap, _ns1__getCategoryList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getCategoryList);
	if (soap_out_PointerTo_ns1__getCategoryList(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getCategoryList(struct soap *soap, const char *tag, int id, _ns1__getCategoryList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getCategoryList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getCategoryList ** SOAP_FMAC4 soap_get_PointerTo_ns1__getCategoryList(struct soap *soap, _ns1__getCategoryList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getCategoryList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__getCategoryList ** SOAP_FMAC4 soap_in_PointerTo_ns1__getCategoryList(struct soap *soap, const char *tag, _ns1__getCategoryList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getCategoryList **)soap_malloc(soap, sizeof(_ns1__getCategoryList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getCategoryList *)soap_instantiate__ns1__getCategoryList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getCategoryList ** p = (_ns1__getCategoryList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getCategoryList, sizeof(_ns1__getCategoryList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getProductDetailsResponse(struct soap *soap, _ns1__getProductDetailsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getProductDetailsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getProductDetailsResponse(struct soap *soap, _ns1__getProductDetailsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getProductDetailsResponse);
	if (soap_out_PointerTo_ns1__getProductDetailsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getProductDetailsResponse(struct soap *soap, const char *tag, int id, _ns1__getProductDetailsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getProductDetailsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getProductDetailsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getProductDetailsResponse(struct soap *soap, _ns1__getProductDetailsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getProductDetailsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__getProductDetailsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getProductDetailsResponse(struct soap *soap, const char *tag, _ns1__getProductDetailsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getProductDetailsResponse **)soap_malloc(soap, sizeof(_ns1__getProductDetailsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getProductDetailsResponse *)soap_instantiate__ns1__getProductDetailsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getProductDetailsResponse ** p = (_ns1__getProductDetailsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getProductDetailsResponse, sizeof(_ns1__getProductDetailsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getProductDetails(struct soap *soap, _ns1__getProductDetails *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getProductDetails))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getProductDetails(struct soap *soap, _ns1__getProductDetails *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getProductDetails);
	if (soap_out_PointerTo_ns1__getProductDetails(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getProductDetails(struct soap *soap, const char *tag, int id, _ns1__getProductDetails *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getProductDetails);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getProductDetails ** SOAP_FMAC4 soap_get_PointerTo_ns1__getProductDetails(struct soap *soap, _ns1__getProductDetails **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getProductDetails(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__getProductDetails ** SOAP_FMAC4 soap_in_PointerTo_ns1__getProductDetails(struct soap *soap, const char *tag, _ns1__getProductDetails **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getProductDetails **)soap_malloc(soap, sizeof(_ns1__getProductDetails *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getProductDetails *)soap_instantiate__ns1__getProductDetails(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getProductDetails ** p = (_ns1__getProductDetails **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getProductDetails, sizeof(_ns1__getProductDetails), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MProductOffer(struct soap *soap, ns2__MProductOffer *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__MProductOffer))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MProductOffer(struct soap *soap, ns2__MProductOffer *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__MProductOffer);
	if (soap_out_PointerTons2__MProductOffer(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MProductOffer(struct soap *soap, const char *tag, int id, ns2__MProductOffer *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__MProductOffer);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__MProductOffer ** SOAP_FMAC4 soap_get_PointerTons2__MProductOffer(struct soap *soap, ns2__MProductOffer **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__MProductOffer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns2__MProductOffer ** SOAP_FMAC4 soap_in_PointerTons2__MProductOffer(struct soap *soap, const char *tag, ns2__MProductOffer **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__MProductOffer **)soap_malloc(soap, sizeof(ns2__MProductOffer *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__MProductOffer *)soap_instantiate_ns2__MProductOffer(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__MProductOffer ** p = (ns2__MProductOffer **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__MProductOffer, sizeof(ns2__MProductOffer), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MContactInfo(struct soap *soap, ns2__MContactInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__MContactInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MContactInfo(struct soap *soap, ns2__MContactInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__MContactInfo);
	if (soap_out_PointerTons2__MContactInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MContactInfo(struct soap *soap, const char *tag, int id, ns2__MContactInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__MContactInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__MContactInfo ** SOAP_FMAC4 soap_get_PointerTons2__MContactInfo(struct soap *soap, ns2__MContactInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__MContactInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns2__MContactInfo ** SOAP_FMAC4 soap_in_PointerTons2__MContactInfo(struct soap *soap, const char *tag, ns2__MContactInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__MContactInfo **)soap_malloc(soap, sizeof(ns2__MContactInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__MContactInfo *)soap_instantiate_ns2__MContactInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__MContactInfo ** p = (ns2__MContactInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__MContactInfo, sizeof(ns2__MContactInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MAddress(struct soap *soap, ns2__MAddress *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__MAddress))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MAddress(struct soap *soap, ns2__MAddress *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__MAddress);
	if (soap_out_PointerTons2__MAddress(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MAddress(struct soap *soap, const char *tag, int id, ns2__MAddress *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__MAddress);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__MAddress ** SOAP_FMAC4 soap_get_PointerTons2__MAddress(struct soap *soap, ns2__MAddress **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__MAddress(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns2__MAddress ** SOAP_FMAC4 soap_in_PointerTons2__MAddress(struct soap *soap, const char *tag, ns2__MAddress **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__MAddress **)soap_malloc(soap, sizeof(ns2__MAddress *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__MAddress *)soap_instantiate_ns2__MAddress(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__MAddress ** p = (ns2__MAddress **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__MAddress, sizeof(ns2__MAddress), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MProduct(struct soap *soap, ns2__MProduct *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__MProduct))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MProduct(struct soap *soap, ns2__MProduct *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__MProduct);
	if (soap_out_PointerTons2__MProduct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MProduct(struct soap *soap, const char *tag, int id, ns2__MProduct *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__MProduct);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__MProduct ** SOAP_FMAC4 soap_get_PointerTons2__MProduct(struct soap *soap, ns2__MProduct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__MProduct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns2__MProduct ** SOAP_FMAC4 soap_in_PointerTons2__MProduct(struct soap *soap, const char *tag, ns2__MProduct **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__MProduct **)soap_malloc(soap, sizeof(ns2__MProduct *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__MProduct *)soap_instantiate_ns2__MProduct(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__MProduct ** p = (ns2__MProduct **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__MProduct, sizeof(ns2__MProduct), 0);
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (ns2__MProduct **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__MDetailedProduct, sizeof(ns2__MDetailedProduct), 0);
		}
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MDetailedProduct(struct soap *soap, ns2__MDetailedProduct *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__MDetailedProduct))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MDetailedProduct(struct soap *soap, ns2__MDetailedProduct *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__MDetailedProduct);
	if (soap_out_PointerTons2__MDetailedProduct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MDetailedProduct(struct soap *soap, const char *tag, int id, ns2__MDetailedProduct *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__MDetailedProduct);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__MDetailedProduct ** SOAP_FMAC4 soap_get_PointerTons2__MDetailedProduct(struct soap *soap, ns2__MDetailedProduct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__MDetailedProduct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns2__MDetailedProduct ** SOAP_FMAC4 soap_in_PointerTons2__MDetailedProduct(struct soap *soap, const char *tag, ns2__MDetailedProduct **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__MDetailedProduct **)soap_malloc(soap, sizeof(ns2__MDetailedProduct *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__MDetailedProduct *)soap_instantiate_ns2__MDetailedProduct(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__MDetailedProduct ** p = (ns2__MDetailedProduct **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__MDetailedProduct, sizeof(ns2__MDetailedProduct), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MDetailedBusinessCard(struct soap *soap, ns2__MDetailedBusinessCard *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__MDetailedBusinessCard))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MDetailedBusinessCard(struct soap *soap, ns2__MDetailedBusinessCard *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__MDetailedBusinessCard);
	if (soap_out_PointerTons2__MDetailedBusinessCard(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MDetailedBusinessCard(struct soap *soap, const char *tag, int id, ns2__MDetailedBusinessCard *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__MDetailedBusinessCard);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__MDetailedBusinessCard ** SOAP_FMAC4 soap_get_PointerTons2__MDetailedBusinessCard(struct soap *soap, ns2__MDetailedBusinessCard **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__MDetailedBusinessCard(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns2__MDetailedBusinessCard ** SOAP_FMAC4 soap_in_PointerTons2__MDetailedBusinessCard(struct soap *soap, const char *tag, ns2__MDetailedBusinessCard **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__MDetailedBusinessCard **)soap_malloc(soap, sizeof(ns2__MDetailedBusinessCard *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__MDetailedBusinessCard *)soap_instantiate_ns2__MDetailedBusinessCard(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__MDetailedBusinessCard ** p = (ns2__MDetailedBusinessCard **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__MDetailedBusinessCard, sizeof(ns2__MDetailedBusinessCard), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MBusinessCard(struct soap *soap, ns2__MBusinessCard *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__MBusinessCard))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MBusinessCard(struct soap *soap, ns2__MBusinessCard *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__MBusinessCard);
	if (soap_out_PointerTons2__MBusinessCard(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MBusinessCard(struct soap *soap, const char *tag, int id, ns2__MBusinessCard *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__MBusinessCard);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__MBusinessCard ** SOAP_FMAC4 soap_get_PointerTons2__MBusinessCard(struct soap *soap, ns2__MBusinessCard **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__MBusinessCard(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns2__MBusinessCard ** SOAP_FMAC4 soap_in_PointerTons2__MBusinessCard(struct soap *soap, const char *tag, ns2__MBusinessCard **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__MBusinessCard **)soap_malloc(soap, sizeof(ns2__MBusinessCard *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__MBusinessCard *)soap_instantiate_ns2__MBusinessCard(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__MBusinessCard ** p = (ns2__MBusinessCard **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__MBusinessCard, sizeof(ns2__MBusinessCard), 0);
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (ns2__MBusinessCard **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__MDetailedBusinessCard, sizeof(ns2__MDetailedBusinessCard), 0);
		}
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofloat(struct soap *soap, float *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_float);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofloat(struct soap *soap, float *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTofloat);
	if (soap_out_PointerTofloat(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofloat(struct soap *soap, const char *tag, int id, float *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_float);
	if (id < 0)
		return soap->error;
	return soap_out_float(soap, tag, id, *a, type);
}

SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerTofloat(struct soap *soap, float **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofloat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerTofloat(struct soap *soap, const char *tag, float **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (float **)soap_malloc(soap, sizeof(float *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_float(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (float **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_float, sizeof(float), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MCategory(struct soap *soap, ns2__MCategory *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__MCategory))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MCategory(struct soap *soap, ns2__MCategory *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__MCategory);
	if (soap_out_PointerTons2__MCategory(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MCategory(struct soap *soap, const char *tag, int id, ns2__MCategory *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__MCategory);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__MCategory ** SOAP_FMAC4 soap_get_PointerTons2__MCategory(struct soap *soap, ns2__MCategory **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__MCategory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns2__MCategory ** SOAP_FMAC4 soap_in_PointerTons2__MCategory(struct soap *soap, const char *tag, ns2__MCategory **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__MCategory **)soap_malloc(soap, sizeof(ns2__MCategory *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__MCategory *)soap_instantiate_ns2__MCategory(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__MCategory ** p = (ns2__MCategory **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__MCategory, sizeof(ns2__MCategory), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__MProductOffer(struct soap *soap, std::vector<ns2__MProductOffer * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__MProductOffer(struct soap *soap, const std::vector<ns2__MProductOffer * >*a)
{
	for (std::vector<ns2__MProductOffer * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons2__MProductOffer(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__MProductOffer(struct soap *soap, const char *tag, int id, const std::vector<ns2__MProductOffer * >*a, const char *type)
{
	for (std::vector<ns2__MProductOffer * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons2__MProductOffer(soap, tag, id, &(*i), "ns2:MProductOffer"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns2__MProductOffer * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__MProductOffer(struct soap *soap, const char *tag, std::vector<ns2__MProductOffer * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons2__MProductOffer(soap, -1)))
		return NULL;
	ns2__MProductOffer *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns2__MProductOffer, SOAP_TYPE_std__vectorTemplateOfPointerTons2__MProductOffer, sizeof(ns2__MProductOffer), 1))
				break;
			if (!soap_in_PointerTons2__MProductOffer(soap, tag, NULL, "ns2:MProductOffer"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons2__MProductOffer(soap, tag, &n, "ns2:MProductOffer"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ns2__MProductOffer * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTons2__MProductOffer(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTons2__MProductOffer(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTons2__MProductOffer(struct soap *soap, std::vector<ns2__MProductOffer * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ns2__MProductOffer * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons2__MProductOffer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons2__MProductOffer(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons2__MProductOffer, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ns2__MProductOffer * >;
		if (size)
			*size = sizeof(std::vector<ns2__MProductOffer * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ns2__MProductOffer * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns2__MProductOffer * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns2__MProductOffer * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__MProductOffer(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns2__MProductOffer * > %p -> %p\n", q, p));
	*(std::vector<ns2__MProductOffer * >*)p = *(std::vector<ns2__MProductOffer * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__MProduct(struct soap *soap, std::vector<ns2__MProduct * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__MProduct(struct soap *soap, const std::vector<ns2__MProduct * >*a)
{
	for (std::vector<ns2__MProduct * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons2__MProduct(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__MProduct(struct soap *soap, const char *tag, int id, const std::vector<ns2__MProduct * >*a, const char *type)
{
	for (std::vector<ns2__MProduct * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons2__MProduct(soap, tag, id, &(*i), "ns2:MProduct"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns2__MProduct * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__MProduct(struct soap *soap, const char *tag, std::vector<ns2__MProduct * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons2__MProduct(soap, -1)))
		return NULL;
	ns2__MProduct *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns2__MProduct, SOAP_TYPE_std__vectorTemplateOfPointerTons2__MProduct, sizeof(ns2__MProduct), 1))
				break;
			if (!soap_in_PointerTons2__MProduct(soap, tag, NULL, "ns2:MProduct"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons2__MProduct(soap, tag, &n, "ns2:MProduct"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ns2__MProduct * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTons2__MProduct(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTons2__MProduct(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTons2__MProduct(struct soap *soap, std::vector<ns2__MProduct * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ns2__MProduct * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons2__MProduct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons2__MProduct(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons2__MProduct, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ns2__MProduct * >;
		if (size)
			*size = sizeof(std::vector<ns2__MProduct * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ns2__MProduct * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns2__MProduct * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns2__MProduct * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__MProduct(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns2__MProduct * > %p -> %p\n", q, p));
	*(std::vector<ns2__MProduct * >*)p = *(std::vector<ns2__MProduct * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__MBusinessCard(struct soap *soap, std::vector<ns2__MBusinessCard * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__MBusinessCard(struct soap *soap, const std::vector<ns2__MBusinessCard * >*a)
{
	for (std::vector<ns2__MBusinessCard * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons2__MBusinessCard(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__MBusinessCard(struct soap *soap, const char *tag, int id, const std::vector<ns2__MBusinessCard * >*a, const char *type)
{
	for (std::vector<ns2__MBusinessCard * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons2__MBusinessCard(soap, tag, id, &(*i), "ns2:MBusinessCard"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns2__MBusinessCard * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__MBusinessCard(struct soap *soap, const char *tag, std::vector<ns2__MBusinessCard * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons2__MBusinessCard(soap, -1)))
		return NULL;
	ns2__MBusinessCard *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns2__MBusinessCard, SOAP_TYPE_std__vectorTemplateOfPointerTons2__MBusinessCard, sizeof(ns2__MBusinessCard), 1))
				break;
			if (!soap_in_PointerTons2__MBusinessCard(soap, tag, NULL, "ns2:MBusinessCard"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons2__MBusinessCard(soap, tag, &n, "ns2:MBusinessCard"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ns2__MBusinessCard * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTons2__MBusinessCard(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTons2__MBusinessCard(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTons2__MBusinessCard(struct soap *soap, std::vector<ns2__MBusinessCard * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ns2__MBusinessCard * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons2__MBusinessCard(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons2__MBusinessCard(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons2__MBusinessCard, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ns2__MBusinessCard * >;
		if (size)
			*size = sizeof(std::vector<ns2__MBusinessCard * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ns2__MBusinessCard * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns2__MBusinessCard * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns2__MBusinessCard * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__MBusinessCard(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns2__MBusinessCard * > %p -> %p\n", q, p));
	*(std::vector<ns2__MBusinessCard * >*)p = *(std::vector<ns2__MBusinessCard * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__MCategory(struct soap *soap, std::vector<ns2__MCategory * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__MCategory(struct soap *soap, const std::vector<ns2__MCategory * >*a)
{
	for (std::vector<ns2__MCategory * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons2__MCategory(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__MCategory(struct soap *soap, const char *tag, int id, const std::vector<ns2__MCategory * >*a, const char *type)
{
	for (std::vector<ns2__MCategory * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons2__MCategory(soap, tag, id, &(*i), "ns2:MCategory"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns2__MCategory * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__MCategory(struct soap *soap, const char *tag, std::vector<ns2__MCategory * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons2__MCategory(soap, -1)))
		return NULL;
	ns2__MCategory *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns2__MCategory, SOAP_TYPE_std__vectorTemplateOfPointerTons2__MCategory, sizeof(ns2__MCategory), 1))
				break;
			if (!soap_in_PointerTons2__MCategory(soap, tag, NULL, "ns2:MCategory"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons2__MCategory(soap, tag, &n, "ns2:MCategory"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ns2__MCategory * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTons2__MCategory(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTons2__MCategory(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTons2__MCategory(struct soap *soap, std::vector<ns2__MCategory * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ns2__MCategory * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons2__MCategory(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons2__MCategory(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons2__MCategory, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ns2__MCategory * >;
		if (size)
			*size = sizeof(std::vector<ns2__MCategory * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ns2__MCategory * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns2__MCategory * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns2__MCategory * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__MCategory(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns2__MCategory * > %p -> %p\n", q, p));
	*(std::vector<ns2__MCategory * >*)p = *(std::vector<ns2__MCategory * >*)q;
}

/* End of soapC.cpp */
