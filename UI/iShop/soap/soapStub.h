/* soapStub.h
   Generated by gSOAP 2.7.11 from ../AmazonWebServices.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_ns1__ProductLine
#define SOAP_TYPE_ns1__ProductLine (9)
/* ns1:ProductLine */
class SOAP_CMAC ns1__ProductLine
{
public:
	std::string *Mode;	/* optional element of type xsd:string */
	class ns1__ProductInfo *ProductInfo;	/* optional element of type ns1:ProductInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_ns1__ProductLine */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProductLine() : Mode(NULL), ProductInfo(NULL), soap(NULL) { }
	virtual ~ns1__ProductLine() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProductInfo
#define SOAP_TYPE_ns1__ProductInfo (10)
/* ns1:ProductInfo */
class SOAP_CMAC ns1__ProductInfo
{
public:
	std::string *TotalResults;	/* optional element of type xsd:string */
	std::string *TotalPages;	/* optional element of type xsd:string */
	std::string *ListName;	/* optional element of type xsd:string */
	class DetailsArray *Details;	/* optional element of type ArrayOfDetails */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns1__ProductInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProductInfo() : TotalResults(NULL), TotalPages(NULL), ListName(NULL), Details(NULL), soap(NULL) { }
	virtual ~ns1__ProductInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Details
#define SOAP_TYPE_ns1__Details (12)
/* ns1:Details */
class SOAP_CMAC ns1__Details
{
public:
	std::string *Url;	/* optional element of type xsd:string */
	std::string *Asin;	/* optional element of type xsd:string */
	std::string *ProductName;	/* optional element of type xsd:string */
	std::string *Catalog;	/* optional element of type xsd:string */
	class KeyPhraseArray *KeyPhrases;	/* optional element of type ArrayOfKeyPhrase */
	class ArtistArray *Artists;	/* optional element of type ArrayOfstring */
	class AuthorArray *Authors;	/* optional element of type ArrayOfstring */
	std::string *Mpn;	/* optional element of type xsd:string */
	class StarringArray *Starring;	/* optional element of type ArrayOfstring */
	class DirectorArray *Directors;	/* optional element of type ArrayOfstring */
	std::string *TheatricalReleaseDate;	/* optional element of type xsd:string */
	std::string *ReleaseDate;	/* optional element of type xsd:string */
	std::string *Manufacturer;	/* optional element of type xsd:string */
	std::string *Distributor;	/* optional element of type xsd:string */
	std::string *ImageUrlSmall;	/* optional element of type xsd:string */
	std::string *ImageUrlMedium;	/* optional element of type xsd:string */
	std::string *ImageUrlLarge;	/* optional element of type xsd:string */
	std::string *ListPrice;	/* optional element of type xsd:string */
	std::string *OurPrice;	/* optional element of type xsd:string */
	std::string *UsedPrice;	/* optional element of type xsd:string */
	std::string *RefurbishedPrice;	/* optional element of type xsd:string */
	std::string *CollectiblePrice;	/* optional element of type xsd:string */
	std::string *ThirdPartyNewPrice;	/* optional element of type xsd:string */
	std::string *NumberOfOfferings;	/* optional element of type xsd:string */
	std::string *ThirdPartyNewCount;	/* optional element of type xsd:string */
	std::string *UsedCount;	/* optional element of type xsd:string */
	std::string *CollectibleCount;	/* optional element of type xsd:string */
	std::string *RefurbishedCount;	/* optional element of type xsd:string */
	class ns1__ThirdPartyProductInfo *ThirdPartyProductInfo;	/* optional element of type ns1:ThirdPartyProductInfo */
	std::string *SalesRank;	/* optional element of type xsd:string */
	class BrowseNodeArray *BrowseList;	/* optional element of type ArrayOfBrowseNode */
	std::string *Media;	/* optional element of type xsd:string */
	std::string *ReadingLevel;	/* optional element of type xsd:string */
	std::string *NumberOfPages;	/* optional element of type xsd:string */
	std::string *NumberOfIssues;	/* optional element of type xsd:string */
	std::string *IssuesPerYear;	/* optional element of type xsd:string */
	std::string *SubscriptionLength;	/* optional element of type xsd:string */
	std::string *DeweyNumber;	/* optional element of type xsd:string */
	std::string *RunningTime;	/* optional element of type xsd:string */
	std::string *Publisher;	/* optional element of type xsd:string */
	std::string *NumMedia;	/* optional element of type xsd:string */
	std::string *Isbn;	/* optional element of type xsd:string */
	class FeaturesArray *Features;	/* optional element of type ArrayOfstring */
	std::string *MpaaRating;	/* optional element of type xsd:string */
	std::string *EsrbRating;	/* optional element of type xsd:string */
	std::string *AgeGroup;	/* optional element of type xsd:string */
	std::string *Availability;	/* optional element of type xsd:string */
	std::string *Upc;	/* optional element of type xsd:string */
	class TrackArray *Tracks;	/* optional element of type ArrayOfTrack */
	class AccessoryArray *Accessories;	/* optional element of type ArrayOfstring */
	class PlatformArray *Platforms;	/* optional element of type ArrayOfstring */
	std::string *Encoding;	/* optional element of type xsd:string */
	class ns1__Reviews *Reviews;	/* optional element of type ns1:Reviews */
	class SimilarProductsArray *SimilarProducts;	/* optional element of type ArrayOfstring */
	class ListArray *Lists;	/* optional element of type ArrayOfstring */
	std::string *Status;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns1__Details */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Details() : Url(NULL), Asin(NULL), ProductName(NULL), Catalog(NULL), KeyPhrases(NULL), Artists(NULL), Authors(NULL), Mpn(NULL), Starring(NULL), Directors(NULL), TheatricalReleaseDate(NULL), ReleaseDate(NULL), Manufacturer(NULL), Distributor(NULL), ImageUrlSmall(NULL), ImageUrlMedium(NULL), ImageUrlLarge(NULL), ListPrice(NULL), OurPrice(NULL), UsedPrice(NULL), RefurbishedPrice(NULL), CollectiblePrice(NULL), ThirdPartyNewPrice(NULL), NumberOfOfferings(NULL), ThirdPartyNewCount(NULL), UsedCount(NULL), CollectibleCount(NULL), RefurbishedCount(NULL), ThirdPartyProductInfo(NULL), SalesRank(NULL), BrowseList(NULL), Media(NULL), ReadingLevel(NULL), NumberOfPages(NULL), NumberOfIssues(NULL), IssuesPerYear(NULL), SubscriptionLength(NULL), DeweyNumber(NULL), RunningTime(NULL), Publisher(NULL), NumMedia(NULL), Isbn(NULL), Features(NULL), MpaaRating(NULL), EsrbRating(NULL), AgeGroup(NULL), Availability(NULL), Upc(NULL), Tracks(NULL), Accessories(NULL), Platforms(NULL), Encoding(NULL), Reviews(NULL), SimilarProducts(NULL), Lists(NULL), Status(NULL), soap(NULL) { }
	virtual ~ns1__Details() { }
};
#endif

#ifndef SOAP_TYPE_ns1__KeyPhrase
#define SOAP_TYPE_ns1__KeyPhrase (14)
/* ns1:KeyPhrase */
class SOAP_CMAC ns1__KeyPhrase
{
public:
	std::string *KeyPhrase;	/* optional element of type xsd:string */
	std::string *Type;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns1__KeyPhrase */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__KeyPhrase() : KeyPhrase(NULL), Type(NULL), soap(NULL) { }
	virtual ~ns1__KeyPhrase() { }
};
#endif

#ifndef SOAP_TYPE_ns1__BrowseNode
#define SOAP_TYPE_ns1__BrowseNode (20)
/* ns1:BrowseNode */
class SOAP_CMAC ns1__BrowseNode
{
public:
	std::string *BrowseId;	/* optional element of type xsd:string */
	std::string *BrowseName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ns1__BrowseNode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__BrowseNode() : BrowseId(NULL), BrowseName(NULL), soap(NULL) { }
	virtual ~ns1__BrowseNode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Track
#define SOAP_TYPE_ns1__Track (23)
/* ns1:Track */
class SOAP_CMAC ns1__Track
{
public:
	std::string *TrackName;	/* optional element of type xsd:string */
	std::string *ByArtist;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ns1__Track */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Track() : TrackName(NULL), ByArtist(NULL), soap(NULL) { }
	virtual ~ns1__Track() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Reviews
#define SOAP_TYPE_ns1__Reviews (26)
/* ns1:Reviews */
class SOAP_CMAC ns1__Reviews
{
public:
	std::string *AvgCustomerRating;	/* optional element of type xsd:string */
	std::string *TotalCustomerReviews;	/* optional element of type xsd:string */
	class CustomerReviewArray *CustomerReviews;	/* optional element of type ArrayOfCustomerReview */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_ns1__Reviews */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Reviews() : AvgCustomerRating(NULL), TotalCustomerReviews(NULL), CustomerReviews(NULL), soap(NULL) { }
	virtual ~ns1__Reviews() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomerReview
#define SOAP_TYPE_ns1__CustomerReview (28)
/* ns1:CustomerReview */
class SOAP_CMAC ns1__CustomerReview
{
public:
	std::string *Rating;	/* optional element of type xsd:string */
	std::string *Summary;	/* optional element of type xsd:string */
	std::string *Comment;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_ns1__CustomerReview */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomerReview() : Rating(NULL), Summary(NULL), Comment(NULL), soap(NULL) { }
	virtual ~ns1__CustomerReview() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MarketplaceSearch
#define SOAP_TYPE_ns1__MarketplaceSearch (31)
/* ns1:MarketplaceSearch */
class SOAP_CMAC ns1__MarketplaceSearch
{
public:
	class MarketplaceSearchDetailsArray *MarketplaceSearchDetails;	/* required element of type ArrayOfMarketplaceSearchDetails */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_ns1__MarketplaceSearch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MarketplaceSearch() : MarketplaceSearchDetails(NULL), soap(NULL) { }
	virtual ~ns1__MarketplaceSearch() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SellerProfile
#define SOAP_TYPE_ns1__SellerProfile (32)
/* ns1:SellerProfile */
class SOAP_CMAC ns1__SellerProfile
{
public:
	class SellerProfileDetailsArray *SellerProfileDetails;	/* required element of type ArrayOfSellerProfileDetails */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_ns1__SellerProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SellerProfile() : SellerProfileDetails(NULL), soap(NULL) { }
	virtual ~ns1__SellerProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SellerSearch
#define SOAP_TYPE_ns1__SellerSearch (33)
/* ns1:SellerSearch */
class SOAP_CMAC ns1__SellerSearch
{
public:
	class SellerSearchDetailsArray *SellerSearchDetails;	/* required element of type ArrayOfSellerSearchDetails */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_ns1__SellerSearch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SellerSearch() : SellerSearchDetails(NULL), soap(NULL) { }
	virtual ~ns1__SellerSearch() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MarketplaceSearchDetails
#define SOAP_TYPE_ns1__MarketplaceSearchDetails (34)
/* ns1:MarketplaceSearchDetails */
class SOAP_CMAC ns1__MarketplaceSearchDetails
{
public:
	std::string *NumberOfOpenListings;	/* optional element of type xsd:string */
	class ns1__ListingProductInfo *ListingProductInfo;	/* optional element of type ns1:ListingProductInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_ns1__MarketplaceSearchDetails */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MarketplaceSearchDetails() : NumberOfOpenListings(NULL), ListingProductInfo(NULL), soap(NULL) { }
	virtual ~ns1__MarketplaceSearchDetails() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SellerProfileDetails
#define SOAP_TYPE_ns1__SellerProfileDetails (36)
/* ns1:SellerProfileDetails */
class SOAP_CMAC ns1__SellerProfileDetails
{
public:
	std::string *SellerNickname;	/* optional element of type xsd:string */
	std::string *OverallFeedbackRating;	/* optional element of type xsd:string */
	std::string *NumberOfFeedback;	/* optional element of type xsd:string */
	std::string *NumberOfCanceledBids;	/* optional element of type xsd:string */
	std::string *NumberOfCanceledAuctions;	/* optional element of type xsd:string */
	std::string *StoreId;	/* optional element of type xsd:string */
	std::string *StoreName;	/* optional element of type xsd:string */
	class ns1__SellerFeedback *SellerFeedback;	/* optional element of type ns1:SellerFeedback */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_ns1__SellerProfileDetails */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SellerProfileDetails() : SellerNickname(NULL), OverallFeedbackRating(NULL), NumberOfFeedback(NULL), NumberOfCanceledBids(NULL), NumberOfCanceledAuctions(NULL), StoreId(NULL), StoreName(NULL), SellerFeedback(NULL), soap(NULL) { }
	virtual ~ns1__SellerProfileDetails() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SellerSearchDetails
#define SOAP_TYPE_ns1__SellerSearchDetails (38)
/* ns1:SellerSearchDetails */
class SOAP_CMAC ns1__SellerSearchDetails
{
public:
	std::string *SellerNickname;	/* optional element of type xsd:string */
	std::string *StoreId;	/* optional element of type xsd:string */
	std::string *StoreName;	/* optional element of type xsd:string */
	std::string *NumberOfOpenListings;	/* optional element of type xsd:string */
	ns1__ListingProductInfo *ListingProductInfo;	/* optional element of type ns1:ListingProductInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_ns1__SellerSearchDetails */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SellerSearchDetails() : SellerNickname(NULL), StoreId(NULL), StoreName(NULL), NumberOfOpenListings(NULL), ListingProductInfo(NULL), soap(NULL) { }
	virtual ~ns1__SellerSearchDetails() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ListingProductInfo
#define SOAP_TYPE_ns1__ListingProductInfo (40)
/* ns1:ListingProductInfo */
class SOAP_CMAC ns1__ListingProductInfo
{
public:
	class ListingProductDetailsArray *ListingProductDetails;	/* required element of type ArrayOfListingProductDetails */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_ns1__ListingProductInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ListingProductInfo() : ListingProductDetails(NULL), soap(NULL) { }
	virtual ~ns1__ListingProductInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ListingProductDetails
#define SOAP_TYPE_ns1__ListingProductDetails (42)
/* ns1:ListingProductDetails */
class SOAP_CMAC ns1__ListingProductDetails
{
public:
	std::string *ExchangeId;	/* optional element of type xsd:string */
	std::string *ListingId;	/* optional element of type xsd:string */
	std::string *ExchangeTitle;	/* optional element of type xsd:string */
	std::string *ExchangePrice;	/* optional element of type xsd:string */
	std::string *ExchangeAsin;	/* optional element of type xsd:string */
	std::string *ExchangeEndDate;	/* optional element of type xsd:string */
	std::string *ExchangeTinyImage;	/* optional element of type xsd:string */
	std::string *ExchangeSellerId;	/* optional element of type xsd:string */
	std::string *ExchangeSellerNickname;	/* optional element of type xsd:string */
	std::string *ExchangeStartDate;	/* optional element of type xsd:string */
	std::string *ExchangeStatus;	/* optional element of type xsd:string */
	std::string *ExchangeQuantity;	/* optional element of type xsd:string */
	std::string *ExchangeQuantityAllocated;	/* optional element of type xsd:string */
	std::string *ExchangeFeaturedCategory;	/* optional element of type xsd:string */
	std::string *ExchangeCondition;	/* optional element of type xsd:string */
	std::string *ExchangeConditionType;	/* optional element of type xsd:string */
	std::string *ExchangeAvailability;	/* optional element of type xsd:string */
	std::string *ExchangeOfferingType;	/* optional element of type xsd:string */
	std::string *ExchangeSellerState;	/* optional element of type xsd:string */
	std::string *ExchangeSellerCountry;	/* optional element of type xsd:string */
	std::string *ExchangeSellerRating;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_ns1__ListingProductDetails */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ListingProductDetails() : ExchangeId(NULL), ListingId(NULL), ExchangeTitle(NULL), ExchangePrice(NULL), ExchangeAsin(NULL), ExchangeEndDate(NULL), ExchangeTinyImage(NULL), ExchangeSellerId(NULL), ExchangeSellerNickname(NULL), ExchangeStartDate(NULL), ExchangeStatus(NULL), ExchangeQuantity(NULL), ExchangeQuantityAllocated(NULL), ExchangeFeaturedCategory(NULL), ExchangeCondition(NULL), ExchangeConditionType(NULL), ExchangeAvailability(NULL), ExchangeOfferingType(NULL), ExchangeSellerState(NULL), ExchangeSellerCountry(NULL), ExchangeSellerRating(NULL), soap(NULL) { }
	virtual ~ns1__ListingProductDetails() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SellerFeedback
#define SOAP_TYPE_ns1__SellerFeedback (43)
/* ns1:SellerFeedback */
class SOAP_CMAC ns1__SellerFeedback
{
public:
	class FeedbackArray *Feedback;	/* required element of type ArrayOfFeedback */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_ns1__SellerFeedback */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SellerFeedback() : Feedback(NULL), soap(NULL) { }
	virtual ~ns1__SellerFeedback() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Feedback
#define SOAP_TYPE_ns1__Feedback (45)
/* ns1:Feedback */
class SOAP_CMAC ns1__Feedback
{
public:
	std::string *FeedbackRating;	/* optional element of type xsd:string */
	std::string *FeedbackComments;	/* optional element of type xsd:string */
	std::string *FeedbackDate;	/* optional element of type xsd:string */
	std::string *FeedbackRater;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_ns1__Feedback */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Feedback() : FeedbackRating(NULL), FeedbackComments(NULL), FeedbackDate(NULL), FeedbackRater(NULL), soap(NULL) { }
	virtual ~ns1__Feedback() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ThirdPartyProductInfo
#define SOAP_TYPE_ns1__ThirdPartyProductInfo (46)
/* ns1:ThirdPartyProductInfo */
class SOAP_CMAC ns1__ThirdPartyProductInfo
{
public:
	class ThirdPartyProductDetailsArray *ThirdPartyProductDetails;	/* required element of type ArrayOfThirdPartyProductDetails */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_ns1__ThirdPartyProductInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ThirdPartyProductInfo() : ThirdPartyProductDetails(NULL), soap(NULL) { }
	virtual ~ns1__ThirdPartyProductInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ThirdPartyProductDetails
#define SOAP_TYPE_ns1__ThirdPartyProductDetails (48)
/* ns1:ThirdPartyProductDetails */
class SOAP_CMAC ns1__ThirdPartyProductDetails
{
public:
	std::string *OfferingType;	/* optional element of type xsd:string */
	std::string *SellerId;	/* optional element of type xsd:string */
	std::string *SellerNickname;	/* optional element of type xsd:string */
	std::string *ExchangeId;	/* optional element of type xsd:string */
	std::string *OfferingPrice;	/* optional element of type xsd:string */
	std::string *Condition;	/* optional element of type xsd:string */
	std::string *ConditionType;	/* optional element of type xsd:string */
	std::string *ExchangeAvailability;	/* optional element of type xsd:string */
	std::string *SellerCountry;	/* optional element of type xsd:string */
	std::string *SellerState;	/* optional element of type xsd:string */
	std::string *ShipComments;	/* optional element of type xsd:string */
	std::string *SellerRating;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_ns1__ThirdPartyProductDetails */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ThirdPartyProductDetails() : OfferingType(NULL), SellerId(NULL), SellerNickname(NULL), ExchangeId(NULL), OfferingPrice(NULL), Condition(NULL), ConditionType(NULL), ExchangeAvailability(NULL), SellerCountry(NULL), SellerState(NULL), ShipComments(NULL), SellerRating(NULL), soap(NULL) { }
	virtual ~ns1__ThirdPartyProductDetails() { }
};
#endif

#ifndef SOAP_TYPE_ns1__KeywordRequest
#define SOAP_TYPE_ns1__KeywordRequest (49)
/* ns1:KeywordRequest */
class SOAP_CMAC ns1__KeywordRequest
{
public:
	std::string keyword;	/* required element of type xsd:string */
	std::string page;	/* required element of type xsd:string */
	std::string mode;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *sort;	/* optional element of type xsd:string */
	std::string *variations;	/* optional element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_ns1__KeywordRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__KeywordRequest() : sort(NULL), variations(NULL), locale(NULL), soap(NULL) { }
	virtual ~ns1__KeywordRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PowerRequest
#define SOAP_TYPE_ns1__PowerRequest (50)
/* ns1:PowerRequest */
class SOAP_CMAC ns1__PowerRequest
{
public:
	std::string power;	/* required element of type xsd:string */
	std::string page;	/* required element of type xsd:string */
	std::string mode;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *sort;	/* optional element of type xsd:string */
	std::string *variations;	/* optional element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE_ns1__PowerRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PowerRequest() : sort(NULL), variations(NULL), locale(NULL), soap(NULL) { }
	virtual ~ns1__PowerRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__BrowseNodeRequest
#define SOAP_TYPE_ns1__BrowseNodeRequest (51)
/* ns1:BrowseNodeRequest */
class SOAP_CMAC ns1__BrowseNodeRequest
{
public:
	std::string browse_USCOREnode;	/* required element of type xsd:string */
	std::string page;	/* required element of type xsd:string */
	std::string mode;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *sort;	/* optional element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_ns1__BrowseNodeRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__BrowseNodeRequest() : sort(NULL), locale(NULL), soap(NULL) { }
	virtual ~ns1__BrowseNodeRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AsinRequest
#define SOAP_TYPE_ns1__AsinRequest (52)
/* ns1:AsinRequest */
class SOAP_CMAC ns1__AsinRequest
{
public:
	std::string asin;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *offer;	/* optional element of type xsd:string */
	std::string *offerpage;	/* optional element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE_ns1__AsinRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AsinRequest() : offer(NULL), offerpage(NULL), locale(NULL), soap(NULL) { }
	virtual ~ns1__AsinRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__BlendedRequest
#define SOAP_TYPE_ns1__BlendedRequest (53)
/* ns1:BlendedRequest */
class SOAP_CMAC ns1__BlendedRequest
{
public:
	std::string blended;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_ns1__BlendedRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__BlendedRequest() : locale(NULL), soap(NULL) { }
	virtual ~ns1__BlendedRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpcRequest
#define SOAP_TYPE_ns1__UpcRequest (54)
/* ns1:UpcRequest */
class SOAP_CMAC ns1__UpcRequest
{
public:
	std::string upc;	/* required element of type xsd:string */
	std::string mode;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *sort;	/* optional element of type xsd:string */
	std::string *variations;	/* optional element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE_ns1__UpcRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpcRequest() : sort(NULL), variations(NULL), locale(NULL), soap(NULL) { }
	virtual ~ns1__UpcRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArtistRequest
#define SOAP_TYPE_ns1__ArtistRequest (55)
/* ns1:ArtistRequest */
class SOAP_CMAC ns1__ArtistRequest
{
public:
	std::string artist;	/* required element of type xsd:string */
	std::string page;	/* required element of type xsd:string */
	std::string mode;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *sort;	/* optional element of type xsd:string */
	std::string *variations;	/* optional element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE_ns1__ArtistRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArtistRequest() : sort(NULL), variations(NULL), locale(NULL), soap(NULL) { }
	virtual ~ns1__ArtistRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AuthorRequest
#define SOAP_TYPE_ns1__AuthorRequest (56)
/* ns1:AuthorRequest */
class SOAP_CMAC ns1__AuthorRequest
{
public:
	std::string author;	/* required element of type xsd:string */
	std::string page;	/* required element of type xsd:string */
	std::string mode;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *sort;	/* optional element of type xsd:string */
	std::string *variations;	/* optional element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE_ns1__AuthorRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AuthorRequest() : sort(NULL), variations(NULL), locale(NULL), soap(NULL) { }
	virtual ~ns1__AuthorRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ActorRequest
#define SOAP_TYPE_ns1__ActorRequest (57)
/* ns1:ActorRequest */
class SOAP_CMAC ns1__ActorRequest
{
public:
	std::string actor;	/* required element of type xsd:string */
	std::string page;	/* required element of type xsd:string */
	std::string mode;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *sort;	/* optional element of type xsd:string */
	std::string *variations;	/* optional element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_ns1__ActorRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ActorRequest() : sort(NULL), variations(NULL), locale(NULL), soap(NULL) { }
	virtual ~ns1__ActorRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DirectorRequest
#define SOAP_TYPE_ns1__DirectorRequest (58)
/* ns1:DirectorRequest */
class SOAP_CMAC ns1__DirectorRequest
{
public:
	std::string director;	/* required element of type xsd:string */
	std::string page;	/* required element of type xsd:string */
	std::string mode;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *sort;	/* optional element of type xsd:string */
	std::string *variations;	/* optional element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_ns1__DirectorRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DirectorRequest() : sort(NULL), variations(NULL), locale(NULL), soap(NULL) { }
	virtual ~ns1__DirectorRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExchangeRequest
#define SOAP_TYPE_ns1__ExchangeRequest (59)
/* ns1:ExchangeRequest */
class SOAP_CMAC ns1__ExchangeRequest
{
public:
	std::string exchange_USCOREid;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE_ns1__ExchangeRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExchangeRequest() : locale(NULL), soap(NULL) { }
	virtual ~ns1__ExchangeRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ManufacturerRequest
#define SOAP_TYPE_ns1__ManufacturerRequest (60)
/* ns1:ManufacturerRequest */
class SOAP_CMAC ns1__ManufacturerRequest
{
public:
	std::string manufacturer;	/* required element of type xsd:string */
	std::string page;	/* required element of type xsd:string */
	std::string mode;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *sort;	/* optional element of type xsd:string */
	std::string *variations;	/* optional element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE_ns1__ManufacturerRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ManufacturerRequest() : sort(NULL), variations(NULL), locale(NULL), soap(NULL) { }
	virtual ~ns1__ManufacturerRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ListManiaRequest
#define SOAP_TYPE_ns1__ListManiaRequest (61)
/* ns1:ListManiaRequest */
class SOAP_CMAC ns1__ListManiaRequest
{
public:
	std::string lm_USCOREid;	/* required element of type xsd:string */
	std::string page;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE_ns1__ListManiaRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ListManiaRequest() : locale(NULL), soap(NULL) { }
	virtual ~ns1__ListManiaRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__WishlistRequest
#define SOAP_TYPE_ns1__WishlistRequest (62)
/* ns1:WishlistRequest */
class SOAP_CMAC ns1__WishlistRequest
{
public:
	std::string wishlist_USCOREid;	/* required element of type xsd:string */
	std::string page;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE_ns1__WishlistRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__WishlistRequest() : locale(NULL), soap(NULL) { }
	virtual ~ns1__WishlistRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MarketplaceRequest
#define SOAP_TYPE_ns1__MarketplaceRequest (63)
/* ns1:MarketplaceRequest */
class SOAP_CMAC ns1__MarketplaceRequest
{
public:
	std::string marketplace_USCOREsearch;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string page;	/* required element of type xsd:string */
	std::string *keyword;	/* optional element of type xsd:string */
	std::string *keyword_USCOREsearch;	/* optional element of type xsd:string */
	std::string *browse_USCOREid;	/* optional element of type xsd:string */
	std::string *zipcode;	/* optional element of type xsd:string */
	std::string *area_USCOREid;	/* optional element of type xsd:string */
	std::string *geo;	/* optional element of type xsd:string */
	std::string *sort;	/* optional element of type xsd:string */
	std::string *listing_USCOREid;	/* optional element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	std::string *index;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE_ns1__MarketplaceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MarketplaceRequest() : keyword(NULL), keyword_USCOREsearch(NULL), browse_USCOREid(NULL), zipcode(NULL), area_USCOREid(NULL), geo(NULL), sort(NULL), listing_USCOREid(NULL), locale(NULL), index(NULL), soap(NULL) { }
	virtual ~ns1__MarketplaceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SellerProfileRequest
#define SOAP_TYPE_ns1__SellerProfileRequest (64)
/* ns1:SellerProfileRequest */
class SOAP_CMAC ns1__SellerProfileRequest
{
public:
	std::string seller_USCOREid;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string page;	/* required element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_ns1__SellerProfileRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SellerProfileRequest() : locale(NULL), soap(NULL) { }
	virtual ~ns1__SellerProfileRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SellerRequest
#define SOAP_TYPE_ns1__SellerRequest (65)
/* ns1:SellerRequest */
class SOAP_CMAC ns1__SellerRequest
{
public:
	std::string seller_USCOREid;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string offerstatus;	/* required element of type xsd:string */
	std::string page;	/* required element of type xsd:string */
	std::string *seller_USCOREbrowse_USCOREid;	/* optional element of type xsd:string */
	std::string *keyword;	/* optional element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	std::string *index;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE_ns1__SellerRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SellerRequest() : seller_USCOREbrowse_USCOREid(NULL), keyword(NULL), locale(NULL), index(NULL), soap(NULL) { }
	virtual ~ns1__SellerRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SimilarityRequest
#define SOAP_TYPE_ns1__SimilarityRequest (66)
/* ns1:SimilarityRequest */
class SOAP_CMAC ns1__SimilarityRequest
{
public:
	std::string asin;	/* required element of type xsd:string */
	std::string tag;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_ns1__SimilarityRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SimilarityRequest() : locale(NULL), soap(NULL) { }
	virtual ~ns1__SimilarityRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Item
#define SOAP_TYPE_ns1__Item (69)
/* ns1:Item */
class SOAP_CMAC ns1__Item
{
public:
	std::string ItemId;	/* required element of type xsd:string */
	std::string ProductName;	/* required element of type xsd:string */
	std::string Catalog;	/* required element of type xsd:string */
	std::string *Asin;	/* optional element of type xsd:string */
	std::string *ExchangeId;	/* optional element of type xsd:string */
	std::string Quantity;	/* required element of type xsd:string */
	std::string *ListPrice;	/* optional element of type xsd:string */
	std::string OurPrice;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE_ns1__Item */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Item() : Asin(NULL), ExchangeId(NULL), ListPrice(NULL), soap(NULL) { }
	virtual ~ns1__Item() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ItemQuantity
#define SOAP_TYPE_ns1__ItemQuantity (71)
/* ns1:ItemQuantity */
class SOAP_CMAC ns1__ItemQuantity
{
public:
	std::string ItemId;	/* required element of type xsd:string */
	std::string Quantity;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE_ns1__ItemQuantity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ItemQuantity() : soap(NULL) { }
	virtual ~ns1__ItemQuantity() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddItem
#define SOAP_TYPE_ns1__AddItem (73)
/* ns1:AddItem */
class SOAP_CMAC ns1__AddItem
{
public:
	std::string *Asin;	/* optional element of type xsd:string */
	std::string *ExchangeId;	/* optional element of type xsd:string */
	std::string Quantity;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE_ns1__AddItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddItem() : Asin(NULL), ExchangeId(NULL), soap(NULL) { }
	virtual ~ns1__AddItem() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ShoppingCart
#define SOAP_TYPE_ns1__ShoppingCart (74)
/* ns1:ShoppingCart */
class SOAP_CMAC ns1__ShoppingCart
{
public:
	std::string CartId;	/* required element of type xsd:string */
	std::string HMAC;	/* required element of type xsd:string */
	std::string PurchaseUrl;	/* required element of type xsd:string */
	class ItemArray *Items;	/* optional element of type ArrayOfItem */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 74; } /* = unique id SOAP_TYPE_ns1__ShoppingCart */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ShoppingCart() : Items(NULL), soap(NULL) { }
	virtual ~ns1__ShoppingCart() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetShoppingCartRequest
#define SOAP_TYPE_ns1__GetShoppingCartRequest (75)
/* ns1:GetShoppingCartRequest */
class SOAP_CMAC ns1__GetShoppingCartRequest
{
public:
	std::string tag;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string CartId;	/* required element of type xsd:string */
	std::string HMAC;	/* required element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE_ns1__GetShoppingCartRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetShoppingCartRequest() : locale(NULL), soap(NULL) { }
	virtual ~ns1__GetShoppingCartRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClearShoppingCartRequest
#define SOAP_TYPE_ns1__ClearShoppingCartRequest (76)
/* ns1:ClearShoppingCartRequest */
class SOAP_CMAC ns1__ClearShoppingCartRequest
{
public:
	std::string tag;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string CartId;	/* required element of type xsd:string */
	std::string HMAC;	/* required element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE_ns1__ClearShoppingCartRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClearShoppingCartRequest() : locale(NULL), soap(NULL) { }
	virtual ~ns1__ClearShoppingCartRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddShoppingCartItemsRequest
#define SOAP_TYPE_ns1__AddShoppingCartItemsRequest (77)
/* ns1:AddShoppingCartItemsRequest */
class SOAP_CMAC ns1__AddShoppingCartItemsRequest
{
public:
	std::string tag;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string *CartId;	/* optional element of type xsd:string */
	std::string *HMAC;	/* optional element of type xsd:string */
	class AddItemArray *Items;	/* required element of type ArrayOfAddItem */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_ns1__AddShoppingCartItemsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddShoppingCartItemsRequest() : CartId(NULL), HMAC(NULL), Items(NULL), locale(NULL), soap(NULL) { }
	virtual ~ns1__AddShoppingCartItemsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveShoppingCartItemsRequest
#define SOAP_TYPE_ns1__RemoveShoppingCartItemsRequest (78)
/* ns1:RemoveShoppingCartItemsRequest */
class SOAP_CMAC ns1__RemoveShoppingCartItemsRequest
{
public:
	std::string tag;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string CartId;	/* required element of type xsd:string */
	std::string HMAC;	/* required element of type xsd:string */
	class ItemIdArray *Items;	/* required element of type ArrayOfstring */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE_ns1__RemoveShoppingCartItemsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveShoppingCartItemsRequest() : Items(NULL), locale(NULL), soap(NULL) { }
	virtual ~ns1__RemoveShoppingCartItemsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyShoppingCartItemsRequest
#define SOAP_TYPE_ns1__ModifyShoppingCartItemsRequest (79)
/* ns1:ModifyShoppingCartItemsRequest */
class SOAP_CMAC ns1__ModifyShoppingCartItemsRequest
{
public:
	std::string tag;	/* required element of type xsd:string */
	std::string devtag;	/* required element of type xsd:string */
	std::string CartId;	/* required element of type xsd:string */
	std::string HMAC;	/* required element of type xsd:string */
	class ItemQuantityArray *Items;	/* required element of type ArrayOfItemQuantity */
	std::string *locale;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 79; } /* = unique id SOAP_TYPE_ns1__ModifyShoppingCartItemsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyShoppingCartItemsRequest() : Items(NULL), locale(NULL), soap(NULL) { }
	virtual ~ns1__ModifyShoppingCartItemsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ProductLineArray
#define SOAP_TYPE_ProductLineArray (8)
/* SOAP encoded array of ns1:ProductLine schema type: */
class SOAP_CMAC ProductLineArray
{
public:
	ns1__ProductLine **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ProductLineArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ProductLineArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~ProductLineArray() { }
};
#endif

#ifndef SOAP_TYPE_DetailsArray
#define SOAP_TYPE_DetailsArray (11)
/* SOAP encoded array of ns1:Details schema type: */
class SOAP_CMAC DetailsArray
{
public:
	ns1__Details **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_DetailsArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         DetailsArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~DetailsArray() { }
};
#endif

#ifndef SOAP_TYPE_KeyPhraseArray
#define SOAP_TYPE_KeyPhraseArray (13)
/* SOAP encoded array of ns1:KeyPhrase schema type: */
class SOAP_CMAC KeyPhraseArray
{
public:
	ns1__KeyPhrase **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_KeyPhraseArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         KeyPhraseArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~KeyPhraseArray() { }
};
#endif

#ifndef SOAP_TYPE_ArtistArray
#define SOAP_TYPE_ArtistArray (15)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC ArtistArray
{
public:
	std::string *__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ArtistArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ArtistArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~ArtistArray() { }
};
#endif

#ifndef SOAP_TYPE_AuthorArray
#define SOAP_TYPE_AuthorArray (16)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC AuthorArray
{
public:
	std::string *__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_AuthorArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         AuthorArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~AuthorArray() { }
};
#endif

#ifndef SOAP_TYPE_StarringArray
#define SOAP_TYPE_StarringArray (17)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC StarringArray
{
public:
	std::string *__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_StarringArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         StarringArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~StarringArray() { }
};
#endif

#ifndef SOAP_TYPE_DirectorArray
#define SOAP_TYPE_DirectorArray (18)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC DirectorArray
{
public:
	std::string *__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_DirectorArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         DirectorArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~DirectorArray() { }
};
#endif

#ifndef SOAP_TYPE_BrowseNodeArray
#define SOAP_TYPE_BrowseNodeArray (19)
/* SOAP encoded array of ns1:BrowseNode schema type: */
class SOAP_CMAC BrowseNodeArray
{
public:
	ns1__BrowseNode **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_BrowseNodeArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         BrowseNodeArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~BrowseNodeArray() { }
};
#endif

#ifndef SOAP_TYPE_FeaturesArray
#define SOAP_TYPE_FeaturesArray (21)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC FeaturesArray
{
public:
	std::string *__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_FeaturesArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         FeaturesArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~FeaturesArray() { }
};
#endif

#ifndef SOAP_TYPE_TrackArray
#define SOAP_TYPE_TrackArray (22)
/* SOAP encoded array of ns1:Track schema type: */
class SOAP_CMAC TrackArray
{
public:
	ns1__Track **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_TrackArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TrackArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~TrackArray() { }
};
#endif

#ifndef SOAP_TYPE_AccessoryArray
#define SOAP_TYPE_AccessoryArray (24)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC AccessoryArray
{
public:
	std::string *__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_AccessoryArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         AccessoryArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~AccessoryArray() { }
};
#endif

#ifndef SOAP_TYPE_PlatformArray
#define SOAP_TYPE_PlatformArray (25)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC PlatformArray
{
public:
	std::string *__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_PlatformArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         PlatformArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~PlatformArray() { }
};
#endif

#ifndef SOAP_TYPE_CustomerReviewArray
#define SOAP_TYPE_CustomerReviewArray (27)
/* SOAP encoded array of ns1:CustomerReview schema type: */
class SOAP_CMAC CustomerReviewArray
{
public:
	ns1__CustomerReview **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_CustomerReviewArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         CustomerReviewArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~CustomerReviewArray() { }
};
#endif

#ifndef SOAP_TYPE_SimilarProductsArray
#define SOAP_TYPE_SimilarProductsArray (29)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC SimilarProductsArray
{
public:
	std::string *__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_SimilarProductsArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         SimilarProductsArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~SimilarProductsArray() { }
};
#endif

#ifndef SOAP_TYPE_ListArray
#define SOAP_TYPE_ListArray (30)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC ListArray
{
public:
	std::string *__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_ListArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ListArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~ListArray() { }
};
#endif

#ifndef SOAP_TYPE_MarketplaceSearchDetailsArray
#define SOAP_TYPE_MarketplaceSearchDetailsArray (35)
/* SOAP encoded array of ns1:MarketplaceSearchDetails schema type: */
class SOAP_CMAC MarketplaceSearchDetailsArray
{
public:
	ns1__MarketplaceSearchDetails **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_MarketplaceSearchDetailsArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MarketplaceSearchDetailsArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~MarketplaceSearchDetailsArray() { }
};
#endif

#ifndef SOAP_TYPE_SellerProfileDetailsArray
#define SOAP_TYPE_SellerProfileDetailsArray (37)
/* SOAP encoded array of ns1:SellerProfileDetails schema type: */
class SOAP_CMAC SellerProfileDetailsArray
{
public:
	ns1__SellerProfileDetails **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_SellerProfileDetailsArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         SellerProfileDetailsArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~SellerProfileDetailsArray() { }
};
#endif

#ifndef SOAP_TYPE_SellerSearchDetailsArray
#define SOAP_TYPE_SellerSearchDetailsArray (39)
/* SOAP encoded array of ns1:SellerSearchDetails schema type: */
class SOAP_CMAC SellerSearchDetailsArray
{
public:
	ns1__SellerSearchDetails **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_SellerSearchDetailsArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         SellerSearchDetailsArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~SellerSearchDetailsArray() { }
};
#endif

#ifndef SOAP_TYPE_ListingProductDetailsArray
#define SOAP_TYPE_ListingProductDetailsArray (41)
/* SOAP encoded array of ns1:ListingProductDetails schema type: */
class SOAP_CMAC ListingProductDetailsArray
{
public:
	ns1__ListingProductDetails **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_ListingProductDetailsArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ListingProductDetailsArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~ListingProductDetailsArray() { }
};
#endif

#ifndef SOAP_TYPE_FeedbackArray
#define SOAP_TYPE_FeedbackArray (44)
/* SOAP encoded array of ns1:Feedback schema type: */
class SOAP_CMAC FeedbackArray
{
public:
	ns1__Feedback **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_FeedbackArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         FeedbackArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~FeedbackArray() { }
};
#endif

#ifndef SOAP_TYPE_ThirdPartyProductDetailsArray
#define SOAP_TYPE_ThirdPartyProductDetailsArray (47)
/* SOAP encoded array of ns1:ThirdPartyProductDetails schema type: */
class SOAP_CMAC ThirdPartyProductDetailsArray
{
public:
	ns1__ThirdPartyProductDetails **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_ThirdPartyProductDetailsArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ThirdPartyProductDetailsArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~ThirdPartyProductDetailsArray() { }
};
#endif

#ifndef SOAP_TYPE_ItemIdArray
#define SOAP_TYPE_ItemIdArray (67)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC ItemIdArray
{
public:
	std::string *__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE_ItemIdArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ItemIdArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~ItemIdArray() { }
};
#endif

#ifndef SOAP_TYPE_ItemArray
#define SOAP_TYPE_ItemArray (68)
/* SOAP encoded array of ns1:Item schema type: */
class SOAP_CMAC ItemArray
{
public:
	ns1__Item **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE_ItemArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ItemArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~ItemArray() { }
};
#endif

#ifndef SOAP_TYPE_ItemQuantityArray
#define SOAP_TYPE_ItemQuantityArray (70)
/* SOAP encoded array of ns1:ItemQuantity schema type: */
class SOAP_CMAC ItemQuantityArray
{
public:
	ns1__ItemQuantity **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_ItemQuantityArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ItemQuantityArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~ItemQuantityArray() { }
};
#endif

#ifndef SOAP_TYPE_AddItemArray
#define SOAP_TYPE_AddItemArray (72)
/* SOAP encoded array of ns1:AddItem schema type: */
class SOAP_CMAC AddItemArray
{
public:
	ns1__AddItem **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 72; } /* = unique id SOAP_TYPE_AddItemArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         AddItemArray() : __ptr(NULL), __size(0), soap(NULL) { }
	virtual ~AddItemArray() { }
};
#endif

#ifndef SOAP_TYPE_ns1__KeywordSearchRequestResponse
#define SOAP_TYPE_ns1__KeywordSearchRequestResponse (142)
/* ns1:KeywordSearchRequestResponse */
struct ns1__KeywordSearchRequestResponse
{
public:
	ns1__ProductInfo *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProductInfo */
};
#endif

#ifndef SOAP_TYPE_ns1__KeywordSearchRequest
#define SOAP_TYPE_ns1__KeywordSearchRequest (146)
/* ns1:KeywordSearchRequest */
struct ns1__KeywordSearchRequest
{
public:
	ns1__KeywordRequest *KeywordSearchRequest;	/* optional element of type ns1:KeywordRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__PowerSearchRequestResponse
#define SOAP_TYPE_ns1__PowerSearchRequestResponse (147)
/* ns1:PowerSearchRequestResponse */
struct ns1__PowerSearchRequestResponse
{
public:
	ns1__ProductInfo *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProductInfo */
};
#endif

#ifndef SOAP_TYPE_ns1__PowerSearchRequest
#define SOAP_TYPE_ns1__PowerSearchRequest (151)
/* ns1:PowerSearchRequest */
struct ns1__PowerSearchRequest
{
public:
	ns1__PowerRequest *PowerSearchRequest;	/* optional element of type ns1:PowerRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__BrowseNodeSearchRequestResponse
#define SOAP_TYPE_ns1__BrowseNodeSearchRequestResponse (152)
/* ns1:BrowseNodeSearchRequestResponse */
struct ns1__BrowseNodeSearchRequestResponse
{
public:
	ns1__ProductInfo *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProductInfo */
};
#endif

#ifndef SOAP_TYPE_ns1__BrowseNodeSearchRequest
#define SOAP_TYPE_ns1__BrowseNodeSearchRequest (156)
/* ns1:BrowseNodeSearchRequest */
struct ns1__BrowseNodeSearchRequest
{
public:
	ns1__BrowseNodeRequest *BrowseNodeSearchRequest;	/* optional element of type ns1:BrowseNodeRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__AsinSearchRequestResponse
#define SOAP_TYPE_ns1__AsinSearchRequestResponse (157)
/* ns1:AsinSearchRequestResponse */
struct ns1__AsinSearchRequestResponse
{
public:
	ns1__ProductInfo *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProductInfo */
};
#endif

#ifndef SOAP_TYPE_ns1__AsinSearchRequest
#define SOAP_TYPE_ns1__AsinSearchRequest (161)
/* ns1:AsinSearchRequest */
struct ns1__AsinSearchRequest
{
public:
	ns1__AsinRequest *AsinSearchRequest;	/* optional element of type ns1:AsinRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__BlendedSearchRequestResponse
#define SOAP_TYPE_ns1__BlendedSearchRequestResponse (162)
/* ns1:BlendedSearchRequestResponse */
struct ns1__BlendedSearchRequestResponse
{
public:
	ProductLineArray *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfProductLine */
};
#endif

#ifndef SOAP_TYPE_ns1__BlendedSearchRequest
#define SOAP_TYPE_ns1__BlendedSearchRequest (167)
/* ns1:BlendedSearchRequest */
struct ns1__BlendedSearchRequest
{
public:
	ns1__BlendedRequest *BlendedSearchRequest;	/* optional element of type ns1:BlendedRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__UpcSearchRequestResponse
#define SOAP_TYPE_ns1__UpcSearchRequestResponse (168)
/* ns1:UpcSearchRequestResponse */
struct ns1__UpcSearchRequestResponse
{
public:
	ns1__ProductInfo *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProductInfo */
};
#endif

#ifndef SOAP_TYPE_ns1__UpcSearchRequest
#define SOAP_TYPE_ns1__UpcSearchRequest (172)
/* ns1:UpcSearchRequest */
struct ns1__UpcSearchRequest
{
public:
	ns1__UpcRequest *UpcSearchRequest;	/* optional element of type ns1:UpcRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__AuthorSearchRequestResponse
#define SOAP_TYPE_ns1__AuthorSearchRequestResponse (173)
/* ns1:AuthorSearchRequestResponse */
struct ns1__AuthorSearchRequestResponse
{
public:
	ns1__ProductInfo *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProductInfo */
};
#endif

#ifndef SOAP_TYPE_ns1__AuthorSearchRequest
#define SOAP_TYPE_ns1__AuthorSearchRequest (177)
/* ns1:AuthorSearchRequest */
struct ns1__AuthorSearchRequest
{
public:
	ns1__AuthorRequest *AuthorSearchRequest;	/* optional element of type ns1:AuthorRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__ArtistSearchRequestResponse
#define SOAP_TYPE_ns1__ArtistSearchRequestResponse (178)
/* ns1:ArtistSearchRequestResponse */
struct ns1__ArtistSearchRequestResponse
{
public:
	ns1__ProductInfo *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProductInfo */
};
#endif

#ifndef SOAP_TYPE_ns1__ArtistSearchRequest
#define SOAP_TYPE_ns1__ArtistSearchRequest (182)
/* ns1:ArtistSearchRequest */
struct ns1__ArtistSearchRequest
{
public:
	ns1__ArtistRequest *ArtistSearchRequest;	/* optional element of type ns1:ArtistRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__ActorSearchRequestResponse
#define SOAP_TYPE_ns1__ActorSearchRequestResponse (183)
/* ns1:ActorSearchRequestResponse */
struct ns1__ActorSearchRequestResponse
{
public:
	ns1__ProductInfo *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProductInfo */
};
#endif

#ifndef SOAP_TYPE_ns1__ActorSearchRequest
#define SOAP_TYPE_ns1__ActorSearchRequest (187)
/* ns1:ActorSearchRequest */
struct ns1__ActorSearchRequest
{
public:
	ns1__ActorRequest *ActorSearchRequest;	/* optional element of type ns1:ActorRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__ManufacturerSearchRequestResponse
#define SOAP_TYPE_ns1__ManufacturerSearchRequestResponse (188)
/* ns1:ManufacturerSearchRequestResponse */
struct ns1__ManufacturerSearchRequestResponse
{
public:
	ns1__ProductInfo *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProductInfo */
};
#endif

#ifndef SOAP_TYPE_ns1__ManufacturerSearchRequest
#define SOAP_TYPE_ns1__ManufacturerSearchRequest (192)
/* ns1:ManufacturerSearchRequest */
struct ns1__ManufacturerSearchRequest
{
public:
	ns1__ManufacturerRequest *ManufacturerSearchRequest;	/* optional element of type ns1:ManufacturerRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__DirectorSearchRequestResponse
#define SOAP_TYPE_ns1__DirectorSearchRequestResponse (193)
/* ns1:DirectorSearchRequestResponse */
struct ns1__DirectorSearchRequestResponse
{
public:
	ns1__ProductInfo *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProductInfo */
};
#endif

#ifndef SOAP_TYPE_ns1__DirectorSearchRequest
#define SOAP_TYPE_ns1__DirectorSearchRequest (197)
/* ns1:DirectorSearchRequest */
struct ns1__DirectorSearchRequest
{
public:
	ns1__DirectorRequest *DirectorSearchRequest;	/* optional element of type ns1:DirectorRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__ExchangeSearchRequestResponse
#define SOAP_TYPE_ns1__ExchangeSearchRequestResponse (198)
/* ns1:ExchangeSearchRequestResponse */
struct ns1__ExchangeSearchRequestResponse
{
public:
	ns1__ListingProductDetails *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ListingProductDetails */
};
#endif

#ifndef SOAP_TYPE_ns1__ExchangeSearchRequest
#define SOAP_TYPE_ns1__ExchangeSearchRequest (202)
/* ns1:ExchangeSearchRequest */
struct ns1__ExchangeSearchRequest
{
public:
	ns1__ExchangeRequest *ExchangeSearchRequest;	/* optional element of type ns1:ExchangeRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__ListManiaSearchRequestResponse
#define SOAP_TYPE_ns1__ListManiaSearchRequestResponse (203)
/* ns1:ListManiaSearchRequestResponse */
struct ns1__ListManiaSearchRequestResponse
{
public:
	ns1__ProductInfo *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProductInfo */
};
#endif

#ifndef SOAP_TYPE_ns1__ListManiaSearchRequest
#define SOAP_TYPE_ns1__ListManiaSearchRequest (207)
/* ns1:ListManiaSearchRequest */
struct ns1__ListManiaSearchRequest
{
public:
	ns1__ListManiaRequest *ListManiaSearchRequest;	/* optional element of type ns1:ListManiaRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__WishlistSearchRequestResponse
#define SOAP_TYPE_ns1__WishlistSearchRequestResponse (208)
/* ns1:WishlistSearchRequestResponse */
struct ns1__WishlistSearchRequestResponse
{
public:
	ns1__ProductInfo *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProductInfo */
};
#endif

#ifndef SOAP_TYPE_ns1__WishlistSearchRequest
#define SOAP_TYPE_ns1__WishlistSearchRequest (212)
/* ns1:WishlistSearchRequest */
struct ns1__WishlistSearchRequest
{
public:
	ns1__WishlistRequest *WishlistSearchRequest;	/* optional element of type ns1:WishlistRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__SellerProfileSearchRequestResponse
#define SOAP_TYPE_ns1__SellerProfileSearchRequestResponse (213)
/* ns1:SellerProfileSearchRequestResponse */
struct ns1__SellerProfileSearchRequestResponse
{
public:
	ns1__SellerProfile *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:SellerProfile */
};
#endif

#ifndef SOAP_TYPE_ns1__SellerProfileSearchRequest
#define SOAP_TYPE_ns1__SellerProfileSearchRequest (218)
/* ns1:SellerProfileSearchRequest */
struct ns1__SellerProfileSearchRequest
{
public:
	ns1__SellerProfileRequest *SellerProfileSearchRequest;	/* optional element of type ns1:SellerProfileRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__SellerSearchRequestResponse
#define SOAP_TYPE_ns1__SellerSearchRequestResponse (219)
/* ns1:SellerSearchRequestResponse */
struct ns1__SellerSearchRequestResponse
{
public:
	ns1__SellerSearch *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:SellerSearch */
};
#endif

#ifndef SOAP_TYPE_ns1__SellerSearchRequest
#define SOAP_TYPE_ns1__SellerSearchRequest (224)
/* ns1:SellerSearchRequest */
struct ns1__SellerSearchRequest
{
public:
	ns1__SellerRequest *SellerSearchRequest;	/* optional element of type ns1:SellerRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__MarketplaceSearchRequestResponse
#define SOAP_TYPE_ns1__MarketplaceSearchRequestResponse (225)
/* ns1:MarketplaceSearchRequestResponse */
struct ns1__MarketplaceSearchRequestResponse
{
public:
	ns1__MarketplaceSearch *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:MarketplaceSearch */
};
#endif

#ifndef SOAP_TYPE_ns1__MarketplaceSearchRequest
#define SOAP_TYPE_ns1__MarketplaceSearchRequest (230)
/* ns1:MarketplaceSearchRequest */
struct ns1__MarketplaceSearchRequest
{
public:
	ns1__MarketplaceRequest *MarketplaceSearchRequest;	/* optional element of type ns1:MarketplaceRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__SimilaritySearchRequestResponse
#define SOAP_TYPE_ns1__SimilaritySearchRequestResponse (231)
/* ns1:SimilaritySearchRequestResponse */
struct ns1__SimilaritySearchRequestResponse
{
public:
	ns1__ProductInfo *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProductInfo */
};
#endif

#ifndef SOAP_TYPE_ns1__SimilaritySearchRequest
#define SOAP_TYPE_ns1__SimilaritySearchRequest (235)
/* ns1:SimilaritySearchRequest */
struct ns1__SimilaritySearchRequest
{
public:
	ns1__SimilarityRequest *SimilaritySearchRequest;	/* optional element of type ns1:SimilarityRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__GetShoppingCartRequestResponse
#define SOAP_TYPE_ns1__GetShoppingCartRequestResponse (236)
/* ns1:GetShoppingCartRequestResponse */
struct ns1__GetShoppingCartRequestResponse
{
public:
	ns1__ShoppingCart *ShoppingCart;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ShoppingCart */
};
#endif

#ifndef SOAP_TYPE_ns1__GetShoppingCartRequest_
#define SOAP_TYPE_ns1__GetShoppingCartRequest_ (241)
/* ns1:GetShoppingCartRequest */
struct ns1__GetShoppingCartRequest_
{
public:
	ns1__GetShoppingCartRequest *GetShoppingCartRequest;	/* optional element of type ns1:GetShoppingCartRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__ClearShoppingCartRequestResponse
#define SOAP_TYPE_ns1__ClearShoppingCartRequestResponse (242)
/* ns1:ClearShoppingCartRequestResponse */
struct ns1__ClearShoppingCartRequestResponse
{
public:
	ns1__ShoppingCart *ShoppingCart;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ShoppingCart */
};
#endif

#ifndef SOAP_TYPE_ns1__ClearShoppingCartRequest_
#define SOAP_TYPE_ns1__ClearShoppingCartRequest_ (246)
/* ns1:ClearShoppingCartRequest */
struct ns1__ClearShoppingCartRequest_
{
public:
	ns1__ClearShoppingCartRequest *ClearShoppingCartRequest;	/* optional element of type ns1:ClearShoppingCartRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__AddShoppingCartItemsRequestResponse
#define SOAP_TYPE_ns1__AddShoppingCartItemsRequestResponse (247)
/* ns1:AddShoppingCartItemsRequestResponse */
struct ns1__AddShoppingCartItemsRequestResponse
{
public:
	ns1__ShoppingCart *ShoppingCart;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ShoppingCart */
};
#endif

#ifndef SOAP_TYPE_ns1__AddShoppingCartItemsRequest_
#define SOAP_TYPE_ns1__AddShoppingCartItemsRequest_ (251)
/* ns1:AddShoppingCartItemsRequest */
struct ns1__AddShoppingCartItemsRequest_
{
public:
	ns1__AddShoppingCartItemsRequest *AddShoppingCartItemsRequest;	/* optional element of type ns1:AddShoppingCartItemsRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveShoppingCartItemsRequestResponse
#define SOAP_TYPE_ns1__RemoveShoppingCartItemsRequestResponse (252)
/* ns1:RemoveShoppingCartItemsRequestResponse */
struct ns1__RemoveShoppingCartItemsRequestResponse
{
public:
	ns1__ShoppingCart *ShoppingCart;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ShoppingCart */
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveShoppingCartItemsRequest_
#define SOAP_TYPE_ns1__RemoveShoppingCartItemsRequest_ (256)
/* ns1:RemoveShoppingCartItemsRequest */
struct ns1__RemoveShoppingCartItemsRequest_
{
public:
	ns1__RemoveShoppingCartItemsRequest *RemoveShoppingCartItemsRequest;	/* optional element of type ns1:RemoveShoppingCartItemsRequest */
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyShoppingCartItemsRequestResponse
#define SOAP_TYPE_ns1__ModifyShoppingCartItemsRequestResponse (257)
/* ns1:ModifyShoppingCartItemsRequestResponse */
struct ns1__ModifyShoppingCartItemsRequestResponse
{
public:
	ns1__ShoppingCart *ShoppingCart;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ShoppingCart */
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyShoppingCartItemsRequest_
#define SOAP_TYPE_ns1__ModifyShoppingCartItemsRequest_ (261)
/* ns1:ModifyShoppingCartItemsRequest */
struct ns1__ModifyShoppingCartItemsRequest_
{
public:
	ns1__ModifyShoppingCartItemsRequest *ModifyShoppingCartItemsRequest;	/* optional element of type ns1:ModifyShoppingCartItemsRequest */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (262)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (263)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (265)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (268)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (269)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__KeywordSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__KeywordRequest *KeywordSearchRequest, struct ns1__KeywordSearchRequestResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__PowerSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PowerRequest *PowerSearchRequest, struct ns1__PowerSearchRequestResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__BrowseNodeSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__BrowseNodeRequest *BrowseNodeSearchRequest, struct ns1__BrowseNodeSearchRequestResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__AsinSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AsinRequest *AsinSearchRequest, struct ns1__AsinSearchRequestResponse &_param_4);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__BlendedSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__BlendedRequest *BlendedSearchRequest, struct ns1__BlendedSearchRequestResponse &_param_5);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__UpcSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpcRequest *UpcSearchRequest, struct ns1__UpcSearchRequestResponse &_param_6);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__AuthorSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AuthorRequest *AuthorSearchRequest, struct ns1__AuthorSearchRequestResponse &_param_7);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__ArtistSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ArtistRequest *ArtistSearchRequest, struct ns1__ArtistSearchRequestResponse &_param_8);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__ActorSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ActorRequest *ActorSearchRequest, struct ns1__ActorSearchRequestResponse &_param_9);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__ManufacturerSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ManufacturerRequest *ManufacturerSearchRequest, struct ns1__ManufacturerSearchRequestResponse &_param_10);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__DirectorSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DirectorRequest *DirectorSearchRequest, struct ns1__DirectorSearchRequestResponse &_param_11);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__ExchangeSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExchangeRequest *ExchangeSearchRequest, struct ns1__ExchangeSearchRequestResponse &_param_12);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__ListManiaSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ListManiaRequest *ListManiaSearchRequest, struct ns1__ListManiaSearchRequestResponse &_param_13);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__WishlistSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__WishlistRequest *WishlistSearchRequest, struct ns1__WishlistSearchRequestResponse &_param_14);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__SellerProfileSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SellerProfileRequest *SellerProfileSearchRequest, struct ns1__SellerProfileSearchRequestResponse &_param_15);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__SellerSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SellerRequest *SellerSearchRequest, struct ns1__SellerSearchRequestResponse &_param_16);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__MarketplaceSearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MarketplaceRequest *MarketplaceSearchRequest, struct ns1__MarketplaceSearchRequestResponse &_param_17);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__SimilaritySearchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SimilarityRequest *SimilaritySearchRequest, struct ns1__SimilaritySearchRequestResponse &_param_18);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__GetShoppingCartRequest_(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__GetShoppingCartRequest *GetShoppingCartRequest, struct ns1__GetShoppingCartRequestResponse &_param_19);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__ClearShoppingCartRequest_(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ClearShoppingCartRequest *ClearShoppingCartRequest, struct ns1__ClearShoppingCartRequestResponse &_param_20);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__AddShoppingCartItemsRequest_(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddShoppingCartItemsRequest *AddShoppingCartItemsRequest, struct ns1__AddShoppingCartItemsRequestResponse &_param_21);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__RemoveShoppingCartItemsRequest_(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveShoppingCartItemsRequest *RemoveShoppingCartItemsRequest, struct ns1__RemoveShoppingCartItemsRequestResponse &_param_22);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__ModifyShoppingCartItemsRequest_(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ModifyShoppingCartItemsRequest *ModifyShoppingCartItemsRequest, struct ns1__ModifyShoppingCartItemsRequestResponse &_param_23);

#endif

/* End of soapStub.h */
